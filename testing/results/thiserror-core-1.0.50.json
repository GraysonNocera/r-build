[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling thiserror-core v1.0.50 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/thiserror-core-1.0.50)\n   Compiling thiserror-core-impl v1.0.50\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n   --> src/lib.rs:239:35\n    |\n239 | #![cfg_attr(not(feature = \"std\"), feature(error_in_core))]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:238:13\n    |\n238 | #![cfg_attr(error_generic_member_access, feature(error_generic_member_access))]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:244:7\n    |\n244 | #[cfg(error_generic_member_access)]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:256:11\n    |\n256 |     #[cfg(error_generic_member_access)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `error_in_core` has been stable since 1.81.0 and no longer requires an attribute to enable\n   --> src/lib.rs:239:43\n    |\n239 | #![cfg_attr(not(feature = \"std\"), feature(error_in_core))]\n    |                                           ^^^^^^^^^^^^^\n    |\n    = note: `#[warn(stable_features)]` on by default\n\nFor more information about this error, try `rustc --explain E0554`.\nwarning: `thiserror-core` (lib) generated 4 warnings\nerror: could not compile `thiserror-core` (lib) due to 1 previous error; 4 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/thiserror-core-1.0.50/src",
    "time_to_build": 795,
    "time_to_solve": 23
  }
]