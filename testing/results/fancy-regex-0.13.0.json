[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling memchr v2.6.0\n   Compiling regex-syntax v0.8.0\n   Compiling bit-vec v0.5.1\nerror[E0432]: unresolved import `alloc::prelude`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:103:12\n    |\n103 | use alloc::prelude::Vec;\n    |            ^^^^^^^ could not find `prelude` in `alloc`\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:87:33\n   |\n87 | #![cfg_attr(not(feature=\"std\"), feature(alloc))]\n   |                                 ^^^^^^^^^^^^^^\n\nerror[E0463]: can't find crate for `std`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.6.0/src/lib.rs:198:1\n    |\n198 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0392]: type parameter `B` is never used\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1221:21\n     |\n1221 | pub struct Iter<'a, B: 'a = u32> {\n     |                     ^^^^^^^^^^^ unused type parameter\n1222 |     bit_vec: &'a BitVec<B>,\n     |                         - `B` is named here, but is likely unused in the containing type\n     |\n     = help: consider removing `B`, referring to it in a field, or using a marker such as `PhantomData`\n\nerror[E0392]: type parameter `B` is never used\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1262:21\n     |\n1262 | pub struct IntoIter<B=u32> {\n     |                     ^^^^^ unused type parameter\n1263 |     bit_vec: BitVec<B>,\n     |                     - `B` is named here, but is likely unused in the containing type\n     |\n     = help: consider removing `B`, referring to it in a field, or using a marker such as `PhantomData`\n     = help: if you intended `B` to be a const parameter, use `const B: /* Type */` instead\n\nerror[E0283]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:228:17\n    |\n228 |         if self.get(i).expect(\"index out of bounds\") {\n    |                 ^^^ cannot infer type for type parameter `B`\n    |\n    = note: cannot satisfy `_: BitBlock`\n    = help: the following types implement trait `BitBlock`:\n              u16\n              u32\n              u64\n              u8\n              usize\nnote: required by a bound in `BitVec::<B>::get`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n    |\n383 | impl<B: BitBlock> BitVec<B> {\n    |         ^^^^^^^^ required by this bound in `BitVec::<B>::get`\n...\n461 |     pub fn get(&self, i: usize) -> Option<bool> {\n    |            --- required by a bound in this associated function\n\nerror[E0282]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:375:27\n    |\n375 |         let mut bit_vec = BitVec::from_elem(len, false);\n    |                           ^^^^^^ cannot infer type for type parameter `B` declared on the struct `BitVec`\n\nerror[E0282]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:672:9\n    |\n672 |         Iter { bit_vec: self, range: 0..self.nbits }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `B` declared on the struct `Iter`\n    |\nhelp: consider specifying the generic argument\n    |\n672 |         Iter::<B> { bit_vec: self, range: 0..self.nbits }\n    |             +++++\n\nerror[E0283]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:795:28\n    |\n795 |         self.blocks().all(|w| w == B::zero())\n    |         ---- ------        ^\n    |         |    |\n    |         |    required by a bound introduced by this call\n    |         type must be known at this point\n    |\n    = note: cannot satisfy `_: BitBlock`\n    = help: the following types implement trait `BitBlock`:\n              u16\n              u32\n              u64\n              u8\n              usize\nnote: required by a bound in `BitVec::<B>::blocks`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n    |\n383 | impl<B: BitBlock> BitVec<B> {\n    |         ^^^^^^^^ required by this bound in `BitVec::<B>::blocks`\n...\n411 |     pub fn blocks(&self) -> Blocks<B> {\n    |            ------ required by a bound in this associated function\nhelp: consider giving this closure parameter an explicit type\n    |\n795 |         self.blocks().all(|w: /* Type */| w == B::zero())\n    |                             ++++++++++++\n\nerror[E0283]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:813:15\n    |\n813 |         !self.none()\n    |               ^^^^ cannot infer type for type parameter `B`\n    |\n    = note: cannot satisfy `_: BitBlock`\n    = help: the following types implement trait `BitBlock`:\n              u16\n              u32\n              u64\n              u8\n              usize\nnote: required by a bound in `BitVec::<B>::none`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n    |\n383 | impl<B: BitBlock> BitVec<B> {\n    |         ^^^^^^^^ required by this bound in `BitVec::<B>::none`\n...\n794 |     pub fn none(&self) -> bool {\n    |            ---- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:882:14\n    |\n882 |         self.iter().zip(v.iter().cloned()).all(|(b1, b2)| b1 == b2)\n    |              ^^^^ cannot infer type for type parameter `B`\n    |\n    = note: cannot satisfy `_: BitBlock`\n    = help: the following types implement trait `BitBlock`:\n              u16\n              u32\n              u64\n              u8\n              usize\nnote: required by a bound in `BitVec::<B>::iter`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n    |\n383 | impl<B: BitBlock> BitVec<B> {\n    |         ^^^^^^^^ required by this bound in `BitVec::<B>::iter`\n...\n671 |     pub fn iter(&self) -> Iter<B> {\n    |            ---- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1103:43\n     |\n1103 |     pub fn is_empty(&self) -> bool { self.len() == 0 }\n     |                                           ^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::len`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::len`\n...\n1091 |     pub fn len(&self) -> usize { self.nbits }\n     |            --- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1171:26\n     |\n1171 |         let mut a = self.iter();\n     |                          ^^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::iter`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::iter`\n...\n671  |     pub fn iter(&self) -> Iter<B> {\n     |            ---- required by a bound in this associated function\n\nerror[E0282]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1202:13\n     |\n1202 |             elem.hash(state);\n     |             ^^^^ cannot infer type\n\nerror[E0283]: type annotations needed for `(_, _)`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1213:48\n     |\n1213 |         self.blocks().zip(other.blocks()).all(|(w1, w2)| w1 == w2)\n     |         ---- ------                            ^^^^^^^^\n     |         |    |\n     |         |    required by a bound introduced by this call\n     |         type must be known at this point\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::blocks`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::blocks`\n...\n411  |     pub fn blocks(&self) -> Blocks<B> {\n     |            ------ required by a bound in this associated function\nhelp: consider giving this closure parameter an explicit type, where the type for type parameter `B` is specified\n     |\n1213 |         self.blocks().zip(other.blocks()).all(|(w1, w2): (B, B)| w1 == w2)\n     |                                                        ++++++++\n\nerror[E0282]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1222:5\n     |\n1220 | #[derive(Clone)]\n     |          ----- in this derive macro expansion\n1221 | pub struct Iter<'a, B: 'a = u32> {\n1222 |     bit_vec: &'a BitVec<B>,\n     |     ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n     |\n     = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1233:48\n     |\n1233 |         self.range.next().map(|i| self.bit_vec.get(i).unwrap())\n     |                                                ^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::get`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::get`\n...\n461  |     pub fn get(&self, i: usize) -> Option<bool> {\n     |            --- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1244:53\n     |\n1244 |         self.range.next_back().map(|i| self.bit_vec.get(i).unwrap())\n     |                                                     ^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::get`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::get`\n...\n461  |     pub fn get(&self, i: usize) -> Option<bool> {\n     |            --- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1257:14\n     |\n1257 |         self.iter()\n     |              ^^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::iter`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::iter`\n...\n671  |     pub fn iter(&self) -> Iter<B> {\n     |            ---- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1272:48\n     |\n1272 |         self.range.next().map(|i| self.bit_vec.get(i).unwrap())\n     |                                                ^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::get`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::get`\n...\n461  |     pub fn get(&self, i: usize) -> Option<bool> {\n     |            --- required by a bound in this associated function\n\nerror[E0283]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1279:53\n     |\n1279 |         self.range.next_back().map(|i| self.bit_vec.get(i).unwrap())\n     |                                                     ^^^ cannot infer type for type parameter `B`\n     |\n     = note: cannot satisfy `_: BitBlock`\n     = help: the following types implement trait `BitBlock`:\n               u16\n               u32\n               u64\n               u8\n               usize\nnote: required by a bound in `BitVec::<B>::get`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:383:9\n     |\n383  | impl<B: BitBlock> BitVec<B> {\n     |         ^^^^^^^^ required by this bound in `BitVec::<B>::get`\n...\n461  |     pub fn get(&self, i: usize) -> Option<bool> {\n     |            --- required by a bound in this associated function\n\nerror[E0282]: type annotations needed\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bit-vec-0.5.1/src/lib.rs:1292:9\n     |\n1292 |         IntoIter { bit_vec: self, range: 0..nbits }\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `B` declared on the struct `IntoIter`\n     |\nhelp: consider specifying the generic argument\n     |\n1292 |         IntoIter::<B> { bit_vec: self, range: 0..nbits }\n     |                 +++++\n\nSome errors have detailed explanations: E0282, E0283, E0392, E0432, E0554.\nFor more information about an error, try `rustc --explain E0282`.\nerror: could not compile `bit-vec` (lib) due to 21 previous errors\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can't find crate for `std`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.0/src/lib.rs:174:1\n    |\n174 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `memchr` (lib) due to 1 previous error\nerror: could not compile `regex-syntax` (lib) due to 1 previous error\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/fancy-regex-0.13.0/src",
    "time_to_build": 588,
    "time_to_solve": 218
  }
]