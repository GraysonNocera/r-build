[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling visit_diff v0.1.1 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/visit_diff-0.1.1)\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n --> src/record.rs:7:5\n  |\n7 | use std::fmt::Debug;\n  |     ^^^ use of undeclared crate or module `std`\n\nerror: cannot find macro `println` in this scope\n   --> src/detect.rs:183:9\n    |\n183 |         println!(\"{:?}\", x);\n    |         ^^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:116:30\n    |\n116 |         Ok(Value::Difference(format!(\"{:?}\", a), format!(\"{:?}\", b)))\n    |                              ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:116:50\n    |\n116 |         Ok(Value::Difference(format!(\"{:?}\", a), format!(\"{:?}\", b)))\n    |                                                  ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:120:24\n    |\n120 |         Ok(Value::Same(format!(\"{:?}\", a), format!(\"{:?}\", b)))\n    |                        ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:120:44\n    |\n120 |         Ok(Value::Same(format!(\"{:?}\", a), format!(\"{:?}\", b)))\n    |                                            ^^^^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:143:21\n    |\n143 |             fields: vec![],\n    |                     ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:154:21\n    |\n154 |             fields: vec![],\n    |                     ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:161:21\n    |\n161 |             fields: vec![],\n    |                     ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:172:21\n    |\n172 |             fields: vec![],\n    |                     ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:177:26\n    |\n177 |         SequenceRecorder(vec![])\n    |                          ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:181:21\n    |\n181 |         MapRecorder(vec![])\n    |                     ^^^\n\nerror: cannot find macro `vec` in this scope\n   --> src/record.rs:186:26\n    |\n186 |         SequenceRecorder(vec![])\n    |                          ^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:270:39\n    |\n270 |         self.0.push(Element::LeftOnly(format!(\"{:?}\", a)))\n    |                                       ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:277:40\n    |\n277 |         self.0.push(Element::RightOnly(format!(\"{:?}\", a)))\n    |                                        ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:300:39\n    |\n300 |         self.0.push(Element::LeftOnly(format!(\"{:?}\", a)))\n    |                                       ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:307:40\n    |\n307 |         self.0.push(Element::RightOnly(format!(\"{:?}\", a)))\n    |                                        ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:326:19\n    |\n326 |         let key = format!(\"{:?}\", key);\n    |                   ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:336:19\n    |\n336 |         let key = format!(\"{:?}\", key);\n    |                   ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:337:45\n    |\n337 |         self.0.push((key, Element::LeftOnly(format!(\"{:?}\", a))))\n    |                                             ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:345:19\n    |\n345 |         let key = format!(\"{:?}\", key);\n    |                   ^^^^^^\n\nerror: cannot find macro `format` in this scope\n   --> src/record.rs:346:46\n    |\n346 |         self.0.push((key, Element::RightOnly(format!(\"{:?}\", a))))\n    |                                              ^^^^^^\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:25:10\n   |\n25 |     Same(String, String),\n   |          ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:25:18\n   |\n25 |     Same(String, String),\n   |                  ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:27:16\n   |\n27 |     Difference(String, String),\n   |                ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:27:24\n   |\n27 |     Difference(String, String),\n   |                        ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> src/record.rs:29:27\n   |\n29 |     Newtype(&'static str, Box<Value>),\n   |                           ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/record.rs:37:14\n   |\n37 |     Sequence(Vec<Element>),\n   |              ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/record.rs:39:9\n   |\n39 |     Set(Vec<Element>),\n   |         ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/record.rs:41:9\n   |\n41 |     Map(Vec<(String, Element)>),\n   |         ^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:41:14\n   |\n41 |     Map(Vec<(String, Element)>),\n   |              ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n23 | pub enum Value<String> {\n   |               ++++++++\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:25:10\n   |\n25 |     Same(String, String),\n   |          ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n23 | pub enum Value<String> {\n   |               ++++++++\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/record.rs:54:17\n   |\n54 |     pub fields: Vec<(&'static str, Option<Value>)>,\n   |                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/record.rs:67:17\n   |\n67 |     pub fields: Vec<Option<Value>>,\n   |                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:93:14\n   |\n93 |     LeftOnly(String),\n   |              ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:95:15\n   |\n95 |     RightOnly(String),\n   |               ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/record.rs:93:14\n   |\n93 |     LeftOnly(String),\n   |              ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n91 | pub enum Element<String> {\n   |                 ++++++++\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/record.rs:253:25\n    |\n253 | struct SequenceRecorder(Vec<Element>);\n    |                         ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/record.rs:315:20\n    |\n315 | struct MapRecorder(Vec<(String, Element)>);\n    |                    ^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/record.rs:315:25\n    |\n315 | struct MapRecorder(Vec<(String, Element)>);\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n315 | struct MapRecorder<String>(Vec<(String, Element)>);\n    |                   ++++++++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/lib.rs:305:29\n    |\n305 |     fn difference(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                             ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n    = note: `#[warn(bare_trait_objects)]` on by default\nhelp: if this is an object-safe trait, use `dyn`\n    |\n305 |     fn difference(self, a: &dyn Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                             +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/lib.rs:305:40\n    |\n305 |     fn difference(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                                        ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n305 |     fn difference(self, a: &Debug, b: &dyn Debug) -> Result<Self::Ok, Self::Err>;\n    |                                        +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/lib.rs:309:23\n    |\n309 |     fn same(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                       ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n309 |     fn same(self, a: &dyn Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                       +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/lib.rs:309:34\n    |\n309 |     fn same(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err>;\n    |                                  ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n309 |     fn same(self, a: &Debug, b: &dyn Debug) -> Result<Self::Ok, Self::Err>;\n    |                                  +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/debug.rs:25:29\n   |\n25 |     fn difference(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n25 |     fn difference(self, a: &dyn Debug, b: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/debug.rs:25:40\n   |\n25 |     fn difference(self, a: &Debug, b: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n25 |     fn difference(self, a: &Debug, b: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/debug.rs:29:23\n   |\n29 |     fn same(self, a: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n29 |     fn same(self, a: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/debug.rs:29:34\n   |\n29 |     fn same(self, a: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n29 |     fn same(self, a: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/detect.rs:203:29\n    |\n203 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                             ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n203 |     fn difference(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                             +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/detect.rs:203:40\n    |\n203 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                                        ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n203 |     fn difference(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n    |                                        +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/detect.rs:207:23\n    |\n207 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                       ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n207 |     fn same(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                       +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/detect.rs:207:34\n    |\n207 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n    |                                  ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n    |\n207 |     fn same(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n    |                                  +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/constant.rs:42:29\n   |\n42 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n42 |     fn difference(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/constant.rs:42:40\n   |\n42 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n42 |     fn difference(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/constant.rs:46:23\n   |\n46 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n46 |     fn same(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/constant.rs:46:34\n   |\n46 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n46 |     fn same(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/unit.rs:20:29\n   |\n20 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n20 |     fn difference(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                             +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/unit.rs:20:40\n   |\n20 |     fn difference(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n20 |     fn difference(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                        +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/unit.rs:24:23\n   |\n24 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n24 |     fn same(self, _: &dyn Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                       +++\n\nwarning: trait objects without an explicit `dyn` are deprecated\n  --> src/unit.rs:24:34\n   |\n24 |     fn same(self, _: &Debug, _: &Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  ^^^^^\n   |\n   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\nhelp: if this is an object-safe trait, use `dyn`\n   |\n24 |     fn same(self, _: &Debug, _: &dyn Debug) -> Result<Self::Ok, Self::Err> {\n   |                                  +++\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n   --> src/record.rs:136:13\n    |\n136 |             Box::new(Diff::diff(a, b, ValueRecorder).void_unwrap()),\n    |             ^^^ use of undeclared type `Box`\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\nwarning: `visit_diff` (lib) generated 20 warnings\nerror: could not compile `visit_diff` (lib) due to 42 previous errors; 20 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/visit_diff-0.1.1/src",
    "time_to_build": 701,
    "time_to_solve": 118
  }
]