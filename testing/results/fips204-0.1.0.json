[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling fips204 v0.1.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/fips204-0.1.0)\nerror: unused macro definition: `functionality`\n  --> src/lib.rs:38:14\n   |\n38 | macro_rules! functionality {\n   |              ^^^^^^^^^^^^^\n   |\nnote: the lint level is defined here\n  --> src/lib.rs:3:9\n   |\n3  | #![deny(warnings)]\n   |         ^^^^^^^^\n   = note: `#[deny(unused_macros)]` implied by `#[deny(warnings)]`\n\nerror: constant `QI` is never used\n  --> src/lib.rs:31:7\n   |\n31 | const QI: i32 = 8_380_417; // 2i32.pow(23) - 2i32.pow(13) + 1; See https://oeis.org/A234388\n   |       ^^\n   |\n   = note: `#[deny(dead_code)]` implied by `#[deny(warnings)]`\n\nerror: constant `QU` is never used\n  --> src/lib.rs:32:7\n   |\n32 | const QU: u32 = QI as u32; // 2u32.pow(23) - 2u32.pow(13) + 1;\n   |       ^^\n\nerror: constant `ZETA` is never used\n  --> src/lib.rs:33:7\n   |\n33 | const ZETA: i32 = 1753; // See line 906 et al\n   |       ^^^^\n\nerror: constant `D` is never used\n  --> src/lib.rs:34:7\n   |\n34 | const D: u32 = 13;\n   |       ^\n\nerror: function `coef_from_three_bytes` is never used\n  --> src/conversion.rs:29:15\n   |\n29 | pub(crate) fn coef_from_three_bytes(bbb: [u8; 3]) -> Result<u32, &'static str> {\n   |               ^^^^^^^^^^^^^^^^^^^^^\n\nerror: function `coef_from_half_byte` is never used\n  --> src/conversion.rs:56:15\n   |\n56 | pub(crate) fn coef_from_half_byte<const ETA: usize>(b: u8) -> Result<i32, &'static str> {\n   |               ^^^^^^^^^^^^^^^^^^^\n\nerror: function `simple_bit_pack` is never used\n  --> src/conversion.rs:85:15\n   |\n85 | pub(crate) fn simple_bit_pack(w: &R, b: u32, bytes_out: &mut [u8]) -> Result<(), &'static str> {\n   |               ^^^^^^^^^^^^^^^\n\nerror: function `bit_pack` is never used\n   --> src/conversion.rs:102:15\n    |\n102 | pub(crate) fn bit_pack(w: &R, a: u32, b: u32, bytes_out: &mut [u8]) -> Result<(), &'static str> {\n    |               ^^^^^^^^\n\nerror: function `simple_bit_unpack` is never used\n   --> src/conversion.rs:151:15\n    |\n151 | pub(crate) fn simple_bit_unpack(v: &[u8], b: u32) -> Result<R, &'static str> {\n    |               ^^^^^^^^^^^^^^^^^\n\nerror: function `bit_unpack` is never used\n   --> src/conversion.rs:169:15\n    |\n169 | pub(crate) fn bit_unpack(v: &[u8], a: u32, b: u32) -> Result<R, &'static str> {\n    |               ^^^^^^^^^^\n\nerror: function `hint_bit_pack` is never used\n   --> src/conversion.rs:206:15\n    |\n206 | pub(crate) fn hint_bit_pack<const K: usize, const OMEGA: usize>(\n    |               ^^^^^^^^^^^^^\n\nerror: function `hint_bit_unpack` is never used\n   --> src/conversion.rs:251:15\n    |\n251 | pub(crate) fn hint_bit_unpack<const K: usize, const OMEGA: usize>(\n    |               ^^^^^^^^^^^^^^^\n\nerror: function `pk_encode` is never used\n  --> src/encodings.rs:21:15\n   |\n21 | pub(crate) fn pk_encode<const K: usize, const PK_LEN: usize>(\n   |               ^^^^^^^^^\n\nerror: function `pk_decode` is never used\n  --> src/encodings.rs:52:15\n   |\n52 | pub(crate) fn pk_decode<const K: usize, const PK_LEN: usize>(\n   |               ^^^^^^^^^\n\nerror: function `sk_encode` is never used\n  --> src/encodings.rs:92:8\n   |\n92 | pub fn sk_encode<\n   |        ^^^^^^^^^\n\nerror: function `sk_decode` is never used\n   --> src/encodings.rs:174:15\n    |\n174 | pub(crate) fn sk_decode<\n    |               ^^^^^^^^^\n\nerror: function `sig_encode` is never used\n   --> src/encodings.rs:248:15\n    |\n248 | pub(crate) fn sig_encode<\n    |               ^^^^^^^^^^\n\nerror: function `sig_decode` is never used\n   --> src/encodings.rs:294:15\n    |\n294 | pub(crate) fn sig_decode<\n    |               ^^^^^^^^^^\n\nerror: function `w1_encode` is never used\n   --> src/encodings.rs:338:15\n    |\n338 | pub(crate) fn w1_encode<const K: usize, const GAMMA2: usize>(\n    |               ^^^^^^^^^\n\nerror: function `h_xof` is never used\n  --> src/hashing.rs:11:15\n   |\n11 | pub(crate) fn h_xof(v: &[&[u8]]) -> impl XofReader {\n   |               ^^^^^\n\nerror: function `h128_xof` is never used\n  --> src/hashing.rs:19:15\n   |\n19 | pub(crate) fn h128_xof(v: &[&[u8]]) -> impl XofReader {\n   |               ^^^^^^^^\n\nerror: function `sample_in_ball` is never used\n  --> src/hashing.rs:34:15\n   |\n34 | pub(crate) fn sample_in_ball<const TAU: usize>(rho: &[u8; 32]) -> Result<R, &'static str> {\n   |               ^^^^^^^^^^^^^^\n\nerror: function `rej_ntt_poly` is never used\n  --> src/hashing.rs:79:15\n   |\n79 | pub(crate) fn rej_ntt_poly(rhos: &[&[u8]]) -> T {\n   |               ^^^^^^^^^^^^\n\nerror: function `rej_bounded_poly` is never used\n   --> src/hashing.rs:113:15\n    |\n113 | pub(crate) fn rej_bounded_poly<const ETA: usize>(rhos: &[&[u8]]) -> R {\n    |               ^^^^^^^^^^^^^^^^\n\nerror: function `expand_a` is never used\n   --> src/hashing.rs:157:15\n    |\n157 | pub(crate) fn expand_a<const K: usize, const L: usize>(rho: &[u8; 32]) -> [[T; L]; K] {\n    |               ^^^^^^^^\n\nerror: function `expand_s` is never used\n   --> src/hashing.rs:181:15\n    |\n181 | pub(crate) fn expand_s<const ETA: usize, const K: usize, const L: usize>(\n    |               ^^^^^^^^\n\nerror: function `expand_mask` is never used\n   --> src/hashing.rs:218:15\n    |\n218 | pub(crate) fn expand_mask<const GAMMA1: usize, const L: usize>(\n    |               ^^^^^^^^^^^\n\nerror: function `is_in_range` is never used\n  --> src/helpers.rs:18:15\n   |\n18 | pub(crate) fn is_in_range(w: &R, lo: u32, hi: u32) -> bool {\n   |               ^^^^^^^^^^^\n\nerror: constant `M` is never used\n  --> src/helpers.rs:24:7\n   |\n24 | const M: i128 = 2i128.pow(64) / (QI as i128);\n   |       ^\n\nerror: function `reduce_q64` is never used\n  --> src/helpers.rs:27:21\n   |\n27 | pub(crate) const fn reduce_q64(a: i64) -> i32 {\n   |                     ^^^^^^^^^^\n\nerror: function `reduce_q32` is never used\n  --> src/helpers.rs:53:21\n   |\n53 | pub(crate) const fn reduce_q32(a: i32) -> i32 {\n   |                     ^^^^^^^^^^\n\nerror: function `bitlen` is never used\n  --> src/helpers.rs:60:14\n   |\n60 | pub const fn bitlen(a: usize) -> usize { a.ilog2() as usize + 1 }\n   |              ^^^^^^\n\nerror: function `mod_pm` is never used\n  --> src/helpers.rs:67:8\n   |\n67 | pub fn mod_pm(m: i32, a: u32) -> i32 {\n   |        ^^^^^^\n\nerror: function `mat_vec_mul` is never used\n  --> src/helpers.rs:80:15\n   |\n80 | pub(crate) fn mat_vec_mul<const K: usize, const L: usize>(\n   |               ^^^^^^^^^^^\n\nerror: function `vec_add` is never used\n   --> src/helpers.rs:101:15\n    |\n101 | pub(crate) fn vec_add<const K: usize>(vec_a: &[R; K], vec_b: &[R; K]) -> [R; K] {\n    |               ^^^^^^^\n\nerror: function `infinity_norm` is never used\n   --> src/helpers.rs:112:8\n    |\n112 | pub fn infinity_norm<const ROW: usize, const COL: usize>(w: &[[i32; COL]; ROW]) -> i32 {\n    |        ^^^^^^^^^^^^^\n\nerror: function `pow_mod_q` is never used\n   --> src/helpers.rs:126:10\n    |\n126 | const fn pow_mod_q(g: i32, e: u8) -> i32 {\n    |          ^^^^^^^^^\n\nerror: function `gen_zeta_table` is never used\n   --> src/helpers.rs:144:10\n    |\n144 | const fn gen_zeta_table() -> [i32; 256] {\n    |          ^^^^^^^^^^^^^^\n\nerror: static `ZETA_TABLE` is never used\n   --> src/helpers.rs:154:19\n    |\n154 | pub(crate) static ZETA_TABLE: [i32; 256] = gen_zeta_table();\n    |                   ^^^^^^^^^^\n\nerror: function `power2round` is never used\n  --> src/high_low.rs:14:15\n   |\n14 | pub(crate) fn power2round(r: Zq) -> (Zq, Zq) {\n   |               ^^^^^^^^^^^\n\nerror: function `decompose` is never used\n  --> src/high_low.rs:30:15\n   |\n30 | pub(crate) fn decompose<const GAMMA2: usize>(r: Zq, r1: &mut Zq, r0: &mut Zq) {\n   |               ^^^^^^^^^\n\nerror: function `high_bits` is never used\n  --> src/high_low.rs:54:15\n   |\n54 | pub(crate) fn high_bits<const GAMMA2: usize>(r: Zq) -> Zq {\n   |               ^^^^^^^^^\n\nerror: function `low_bits` is never used\n  --> src/high_low.rs:68:15\n   |\n68 | pub(crate) fn low_bits<const GAMMA2: usize>(r: Zq) -> Zq {\n   |               ^^^^^^^^\n\nerror: function `make_hint` is never used\n  --> src/high_low.rs:82:15\n   |\n82 | pub(crate) fn make_hint<const GAMMA2: usize>(z: Zq, r: Zq) -> bool {\n   |               ^^^^^^^^^\n\nerror: function `use_hint` is never used\n  --> src/high_low.rs:97:15\n   |\n97 | pub(crate) fn use_hint<const GAMMA2: usize>(h: Zq, r: Zq) -> Zq {\n   |               ^^^^^^^^\n\nerror: function `key_gen` is never used\n  --> src/ml_dsa.rs:20:15\n   |\n20 | pub(crate) fn key_gen<\n   |               ^^^^^^^\n\nerror: function `sign` is never used\n  --> src/ml_dsa.rs:88:15\n   |\n88 | pub(crate) fn sign<\n   |               ^^^^\n\nerror: function `verify` is never used\n   --> src/ml_dsa.rs:274:15\n    |\n274 | pub(crate) fn verify<\n    |               ^^^^^^\n\nerror: function `ntt` is never used\n  --> src/ntt.rs:11:15\n   |\n11 | pub(crate) fn ntt<const X: usize>(w: &[R; X]) -> [T; X] {\n   |               ^^^\n\nerror: function `inv_ntt` is never used\n  --> src/ntt.rs:60:15\n   |\n60 | pub(crate) fn inv_ntt<const X: usize>(w_hat: &[T; X]) -> [R; X] {\n   |               ^^^^^^^\n\nerror: trait `Zero` is never used\n --> src/types.rs:3:18\n  |\n3 | pub(crate) trait Zero {\n  |                  ^^^^\n\nerror: type alias `Rq` is never used\n --> src/types.rs:7:17\n  |\n7 | pub(crate) type Rq = i32;\n  |                 ^^\n\nerror: type alias `R` is never used\n --> src/types.rs:8:17\n  |\n8 | pub(crate) type R = [Rq; 256];\n  |                 ^\n\nerror: type alias `Tq` is never used\n  --> src/types.rs:15:17\n   |\n15 | pub(crate) type Tq = i32;\n   |                 ^^\n\nerror: type alias `T` is never used\n  --> src/types.rs:16:17\n   |\n16 | pub(crate) type T = [Tq; 256];\n   |                 ^\n\nerror: type alias `Zq` is never used\n  --> src/types.rs:19:17\n   |\n19 | pub(crate) type Zq = i32;\n   |                 ^^\n\nerror: could not compile `fips204` (lib) due to 57 previous errors\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/fips204-0.1.0/src",
    "time_to_build": 343,
    "time_to_solve": 109
  }
]