[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling syn v1.0.109\n   Compiling either v1.13.0\n   Compiling itertools v0.10.5\n   Compiling eosio-codegen v0.2.5\n   Compiling eosio-macro v0.2.6\n   Compiling rust-chain v0.2.8 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/rust-chain-0.2.8)\nerror: only supports compilation as `std` or `no_std` + `wasm32-unknown`\n  --> src/allocator/bump.rs:96:13\n   |\n96 | /             compile_error! {\n97 | |                 \"only supports compilation as `std` or `no_std` + `wasm32-unknown`\"\n98 | |             }\n   | |_____________^\n\nerror: chain only support compilation as `std` or `no_std` + `wasm32-unknown`\n  --> src/vmapi/mod.rs:12:9\n   |\n12 | /         compile_error! {\n13 | |             \"chain only support compilation as `std` or `no_std` + `wasm32-unknown`\"\n14 | |         }\n   | |_________^\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n --> src/structs.rs:5:19\n  |\n5 | use crate::vmapi::eosio::{\n  |                   ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n --> src/serializer.rs:8:12\n  |\n8 |     vmapi::eosio::{\n  |            ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::db`\n  --> src/db.rs:13:19\n   |\n13 | use crate::vmapi::db::*;\n   |                   ^^ could not find `db` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::db`\n  --> src/mi_not_generic.rs:13:19\n   |\n13 | use crate::vmapi::db::*;\n   |                   ^^ could not find `db` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n  --> src/asset.rs:24:19\n   |\n24 | use crate::vmapi::eosio::{\n   |                   ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::crypto`\n --> src/crypto.rs:1:5\n  |\n1 | use crate::vmapi::crypto;\n  |     ^^^^^^^^^^^^^^^^^^^^ no `crypto` in `vmapi`\n  |\nhelp: consider importing this module instead\n  |\n1 | use crate::crypto;\n  |     ~~~~~~~~~~~~~\n\nerror[E0432]: unresolved import `self::vmapi::eosio`\n   --> src/lib.rs:159:22\n    |\n159 | pub use self::vmapi::eosio::{\n    |                      ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `self::vmapi::eosio_ex`\n   --> src/lib.rs:206:22\n    |\n206 | pub use self::vmapi::eosio_ex::{\n    |                      ^^^^^^^^ could not find `eosio_ex` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n  --> src/name.rs:19:19\n   |\n19 | use crate::vmapi::eosio::{\n   |                   ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n --> src/action.rs:6:19\n  |\n6 | use crate::vmapi::eosio::{\n  |                   ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio_ex`\n  --> src/action.rs:11:5\n   |\n11 | use crate::vmapi::eosio_ex;\n   |     ^^^^^^^^^^^^^^^^^^^^^^ no `eosio_ex` in `vmapi`\n\nerror[E0432]: unresolved import `crate::vmapi::eosio`\n  --> src/varint.rs:11:19\n   |\n11 | use crate::vmapi::eosio::{\n   |                   ^^^^^ could not find `eosio` in `vmapi`\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --> src/lib.rs:2:35\n  |\n2 | #![cfg_attr(not(feature = \"std\"), feature(alloc_error_handler, panic_info_message, core_intrinsics))]\n  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unexpected `cfg` condition value: `wee-alloc`\n --> src/lib.rs:8:11\n  |\n8 | #[cfg(not(feature = \"wee-alloc\"))]\n  |           ^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: expected values for `feature` are: `chaintester`, `default`, `eosio-scale-info`, `serde`, `serde_json`, and `std`\n  = help: consider adding `wee-alloc` as a feature in `Cargo.toml`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: the feature `core_intrinsics` is internal to the compiler or standard library\n --> src/lib.rs:2:84\n  |\n2 | #![cfg_attr(not(feature = \"std\"), feature(alloc_error_handler, panic_info_message, core_intrinsics))]\n  |                                                                                    ^^^^^^^^^^^^^^^\n  |\n  = note: using it is strongly discouraged\n  = note: `#[warn(internal_features)]` on by default\n\nwarning: unexpected `cfg` condition value: `wee-alloc`\n --> src/allocator/mod.rs:1:11\n  |\n1 | #[cfg(not(feature = \"wee-alloc\"))]\n  |           ^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: expected values for `feature` are: `chaintester`, `default`, `eosio-scale-info`, `serde`, `serde_json`, and `std`\n  = help: consider adding `wee-alloc` as a feature in `Cargo.toml`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `vec::Vec`\n  --> src/db.rs:34:5\n   |\n34 |     vec::Vec,\n   |     ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: the feature `panic_info_message` has been stable since 1.81.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:64\n  |\n2 | #![cfg_attr(not(feature = \"std\"), feature(alloc_error_handler, panic_info_message, core_intrinsics))]\n  |                                                                ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nerror[E0599]: no method named `request_pages` found for mutable reference `&mut InnerAlloc` in the current scope\n   --> src/allocator/bump.rs:119:35\n    |\n119 |             let page_start = self.request_pages(required_pages)?;\n    |                                   ^^^^^^^^^^^^^ method not found in `&mut InnerAlloc`\n\nSome errors have detailed explanations: E0432, E0554, E0599.\nFor more information about an error, try `rustc --explain E0432`.\nwarning: `rust-chain` (lib) generated 5 warnings\nerror: could not compile `rust-chain` (lib) due to 16 previous errors; 5 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/rust-chain-0.2.8/src",
    "time_to_build": 5034,
    "time_to_solve": 326
  }
]