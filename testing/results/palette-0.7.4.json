[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling palette v0.7.4 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/palette-0.7.4)\n   Compiling syn v2.0.48\n   Compiling palette_derive v0.7.4\nerror[E0277]: the trait bound `f32: Round` is not satisfied\n   --> src/angle.rs:127:40\n    |\n127 |                     self - Round::ceil(((self + 180.0) / 360.0) - 1.0) * 360.0\n    |                            ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Round` is not implemented for `f32`\n    |                            |\n    |                            required by a bound introduced by this call\n...\n179 | impl_angle_float!(f32, f64);\n    | --------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_angle_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f32: Round` is not satisfied\n   --> src/angle.rs:134:42\n    |\n134 |                     self - (Round::floor(self / 360.0) * 360.0)\n    |                             ------------ ^^^^^^^^^^^^ the trait `Round` is not implemented for `f32`\n    |                             |\n    |                             required by a bound introduced by this call\n...\n179 | impl_angle_float!(f32, f64);\n    | --------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_angle_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/angle.rs:127:40\n    |\n127 |                     self - Round::ceil(((self + 180.0) / 360.0) - 1.0) * 360.0\n    |                            ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Round` is not implemented for `f64`\n    |                            |\n    |                            required by a bound introduced by this call\n...\n179 | impl_angle_float!(f32, f64);\n    | --------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_angle_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/angle.rs:134:42\n    |\n134 |                     self - (Round::floor(self / 360.0) * 360.0)\n    |                             ------------ ^^^^^^^^^^^^ the trait `Round` is not implemented for `f64`\n    |                             |\n    |                             required by a bound introduced by this call\n...\n179 | impl_angle_float!(f32, f64);\n    | --------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_angle_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `round` found for type `f32` in the current scope\n   --> src/angle.rs:166:46\n    |\n166 |                     let rounded = normalized.round();\n    |                                              ^^^^^ method not found in `f32`\n...\n182 | impl_from_angle_u8!(f32, f64);\n    | ----------------------------- in this macro invocation\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `Round` defines an item `round`, perhaps you need to implement it\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_from_angle_u8` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `round` found for type `f64` in the current scope\n   --> src/angle.rs:166:46\n    |\n166 |                     let rounded = normalized.round();\n    |                                              ^^^^^ method not found in `f64`\n...\n182 | impl_from_angle_u8!(f32, f64);\n    | ----------------------------- in this macro invocation\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `Round` defines an item `round`, perhaps you need to implement it\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `impl_from_angle_u8` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Sqrt` is not satisfied\n   --> src/lch.rs:119:44\n    |\n119 |         T::from_f64(crate::num::Sqrt::sqrt(128.0f64 * 128.0 + 128.0 * 128.0))\n    |                     ---------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Sqrt` is not implemented for `f64`\n    |                     |\n    |                     required by a bound introduced by this call\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:163:1\n    |\n163 | pub trait Sqrt {\n    | ^^^^^^^^^^^^^^\n\nerror[E0277]: the trait bound `f64: Trigonometry` is not satisfied\n   --> src/luv_bounds.rs:19:60\n    |\n19  |         let (sin_theta, cos_theta) = Trigonometry::sin_cos(theta);\n    |                                      --------------------- ^^^^^ the trait `Trigonometry` is not implemented for `f64`\n    |                                      |\n    |                                      required by a bound introduced by this call\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:120:1\n    |\n120 | pub trait Trigonometry: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `abs` found for type `f64` in the current scope\n   --> src/luv_bounds.rs:21:18\n    |\n21  |         if denom.abs() > 1.0e-6 {\n    |                  ^^^ method not found in `f64`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `Abs` defines an item `abs`, perhaps you need to implement it\n   --> src/num.rs:156:1\n    |\n156 | pub trait Abs {\n    | ^^^^^^^^^^^^^\n\nerror[E0277]: the trait bound `f64: Abs` is not satisfied\n   --> src/luv_bounds.rs:31:18\n    |\n31  |         Abs::abs(self.intercept) / Sqrt::sqrt(self.slope * self.slope + 1.0)\n    |         -------- ^^^^^^^^^^^^^^ the trait `Abs` is not implemented for `f64`\n    |         |\n    |         required by a bound introduced by this call\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:156:1\n    |\n156 | pub trait Abs {\n    | ^^^^^^^^^^^^^\n\nerror[E0277]: the trait bound `f64: Sqrt` is not satisfied\n   --> src/luv_bounds.rs:31:47\n    |\n31  |         Abs::abs(self.intercept) / Sqrt::sqrt(self.slope * self.slope + 1.0)\n    |                                    ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Sqrt` is not implemented for `f64`\n    |                                    |\n    |                                    required by a bound introduced by this call\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:163:1\n    |\n163 | pub trait Sqrt {\n    | ^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `powi` found for type `f64` in the current scope\n   --> src/luv_bounds.rs:56:31\n    |\n56  |         let sub1 = (l + 16.0).powi(3) / 1560896.0;\n    |                               ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `Powi` defines an item `powi`, perhaps you need to implement it\n   --> src/num.rs:187:1\n    |\n187 | pub trait Powi {\n    | ^^^^^^^^^^^^^^\nhelp: there is a method `powu` with a similar name\n    |\n56  |         let sub1 = (l + 16.0).powu(3) / 1560896.0;\n    |                               ~~~~\n\nerror[E0277]: the trait bound `f32: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f32`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n257 | convert_uint_to_uint!(u8; via f32 (u16); via f64 (u32, u64, u128););\n    | ------------------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f64`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n257 | convert_uint_to_uint!(u8; via f32 (u16); via f64 (u32, u64, u128););\n    | ------------------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f32: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f32`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n260 | convert_uint_to_uint!(u16; via f32 (u8); via f64 (u32, u64, u128););\n    | ------------------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f64`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n260 | convert_uint_to_uint!(u16; via f32 (u8); via f64 (u32, u64, u128););\n    | ------------------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f64`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n263 | convert_uint_to_uint!(u32; via f64 (u8, u16, u64, u128););\n    | --------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f64`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n266 | convert_uint_to_uint!(u64; via f64 (u8, u16, u32, u128););\n    | --------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `f64: Round` is not satisfied\n   --> src/stimulus.rs:233:44\n    |\n233 |                         clamp(Round::round(scaled), 0.0, target_max) as $target\n    |                               ------------ ^^^^^^ the trait `Round` is not implemented for `f64`\n    |                               |\n    |                               required by a bound introduced by this call\n...\n269 | convert_uint_to_uint!(u128; via f64 (u8, u16, u32, u64););\n    | --------------------------------------------------------- in this macro invocation\n    |\nhelp: this trait has no implementations, consider adding one\n   --> src/num.rs:234:1\n    |\n234 | pub trait Round {\n    | ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `convert_uint_to_uint` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `palette` (lib) due to 32 previous errors\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/palette-0.7.4/src",
    "time_to_build": 10592,
    "time_to_solve": 1049
  }
]