[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling prisma2d v0.1.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/prisma2d-0.1.0)\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n  = note: `std` is required by `prisma2d` because it does not declare `#![no_std]`\n\nerror: cannot find macro `assert` in this scope\n  --> src/vertices.rs:34:5\n   |\n34 |     assert!(vertices.len() >= 2, \"You must have at least 2 vertices to draw! (Use prisma2d::point::Point for a single pixel)\");\n   |     ^^^^^^\n   |\nhelp: consider importing this macro\n   |\n1  + use core::assert;\n   |\n\nerror: cannot find attribute `derive` in this scope\n --> src/vertices.rs:7:3\n  |\n7 | #[derive(Debug, Clone, Copy, PartialEq, PartialOrd)]\n  |   ^^^^^^\n  |\nhelp: consider importing this attribute macro\n  |\n1 + use core::prelude::rust_2024::derive;\n  |\n\nerror: cannot find attribute `derive` in this scope\n --> src/point.rs:4:3\n  |\n4 | #[derive(Debug, Clone, Copy, PartialEq, PartialOrd, Eq)]\n  |   ^^^^^^\n  |\nhelp: consider importing this attribute macro\n  |\n1 + use core::prelude::rust_2024::derive;\n  |\n\nerror: cannot find attribute `derive` in this scope\n --> src/line.rs:4:3\n  |\n4 | #[derive(Debug, Clone, PartialEq, PartialOrd, Eq)]\n  |   ^^^^^^\n  |\nhelp: consider importing this attribute macro\n  |\n1 + use core::prelude::rust_2024::derive;\n  |\n\nerror: cannot find attribute `derive` in this scope\n --> src/color.rs:4:3\n  |\n4 | #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n  |   ^^^^^^\n  |\nhelp: consider importing this attribute macro\n  |\n1 + use core::prelude::rust_2024::derive;\n  |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> src/circle.rs:11:49\n   |\n11 |     pub fn new(center: Point, size: i64, color: Option<Color>) -> Self {\n   |                                                 ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n1  + use core::option::Option;\n   |\n\nerror[E0405]: cannot find trait `Default` in this scope\n  --> src/color.rs:68:6\n   |\n68 | impl Default for Color {\n   |      ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::default::Default;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> src/line.rs:13:49\n   |\n13 |     pub fn new(start: Point, end: Point, color: Option<Color>) -> Self {\n   |                                                 ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n1  + use core::option::Option;\n   |\n\nerror[E0405]: cannot find trait `From` in this scope\n  --> src/vertices.rs:21:6\n   |\n21 | impl From<Point> for Vertex {\n   |      ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::convert::From;\n   |\n\nerror[E0405]: cannot find trait `Into` in this scope\n  --> src/vertices.rs:27:6\n   |\n27 | impl Into<Point> for Vertex {\n   |      ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::convert::Into;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> src/vertices.rs:37:68\n   |\n37 |         let line = Line::new(vertices[0].point, vertices[1].point, Some(color));\n   |                                                                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::option::Option::Some;\n   |\n\nwarning: unexpected `cfg` condition value: `nostd`\n  --> src/lib.rs:18:13\n   |\n18 | #![cfg_attr(target_feature = \"nostd\", no_std)]\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 197 more\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `inline_aggr`\n  --> src/circle.rs:19:16\n   |\n19 |     #[cfg_attr(inline_aggr, inline)]\n   |                ^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(inline_aggr)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(inline_aggr)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror: requires `sized` lang_item\n\nerror: requires `sized` lang_item\n  --> src/color.rs:86:29\n   |\n86 | pub fn clear_buffer(buffer: &mut [u8], color: Color) {\n   |                             ^^^^^^^^^\n\nerror: requires `sized` lang_item\n   --> src/color.rs:105:39\n    |\n105 | fn clear_buffer_single_thread(buffer: &mut [u8], color: Color) {\n    |                                       ^^^^^^^^^\n\nerror: requires `sized` lang_item\n  --> src/point.rs:20:26\n   |\n20 | pub fn draw_pixel(color: [u8; 4], x: u64, y: u64, width: u64, fb: &mut [u8]) {\n   |                          ^^^^^^^\n\nerror: requires `sized` lang_item\n  --> src/vertices.rs:33:32\n   |\n33 | pub fn draw_vertices(vertices: &[Vertex], color: Color, width: i64, framebuffer: &mut [u8]) {\n   |                                ^^^^^^^^^\n\nSome errors have detailed explanations: E0405, E0412, E0425, E0463.\nFor more information about an error, try `rustc --explain E0405`.\nwarning: `prisma2d` (lib) generated 2 warnings\nerror: could not compile `prisma2d` (lib) due to 17 previous errors; 2 warnings emitted\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/prisma2d-0.1.0/src",
    "time_to_build": 213,
    "time_to_solve": 27
  }
]