[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling default-from-serde v0.1.2 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/default-from-serde-0.1.2)\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/lib.rs:38:5\n   |\n38 | use std::fmt::Display;\n   |     ^^^ use of undeclared crate or module `std`\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> src/lib.rs:73:18\n   |\n73 | pub struct Error(Box<String>);\n   |                  ^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:73:22\n   |\n73 | pub struct Error(Box<String>);\n   |                      ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n73 | pub struct Error<String>(Box<String>);\n   |                 ++++++++\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:422:9\n    |\n422 |     Map(String),\n    |         ^^^^^^ not found in this scope\n\nwarning: unexpected `cfg` condition value: `arbitrary_precision`\n   --> src/lib.rs:423:11\n    |\n423 |     #[cfg(feature = \"arbitrary_precision\")]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default` and `std`\n    = help: consider adding `arbitrary_precision` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `alloc`\n   --> src/lib.rs:452:32\n    |\n452 |     #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    |                                ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default` and `std`\n    = help: consider adding `alloc` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0277]: `Error` doesn't implement `Display`\n   --> src/lib.rs:81:27\n    |\n81  | impl serde::de::Error for Error {\n    |                           ^^^^^ `Error` cannot be formatted with the default formatter\n    |\n    = help: the trait `Display` is not implemented for `Error`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `serde::de::Error`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:303:1\n    |\n303 | declare_error_trait!(Error: Sized + Debug + Display);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Error`\n    = note: this error originates in the macro `declare_error_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: `Error` doesn't implement `Display`\n  --> src/lib.rs:90:30\n   |\n90 | impl serde::de::StdError for Error {\n   |                              ^^^^^ `Error` cannot be formatted with the default formatter\n   |\n   = help: the trait `Display` is not implemented for `Error`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `StdError`\n  --> /Users/graysonnocera/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/error.rs:32:26\n   |\n32 | pub trait Error: Debug + Display {\n   |                          ^^^^^^^ required by this bound in `Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n   --> src/lib.rs:129:18\n    |\n129 |     type Error = Error;\n    |                  ^^^^^ `Error` cannot be formatted with the default formatter\n    |\n    = help: the trait `Display` is not implemented for `Error`, which is required by `<DefaultDeserializer as Deserializer<'de>>::Error: serde::de::Error`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: the following other types implement trait `serde::de::Error`:\n              Error\n              serde::de::value::Error\n    = note: required for `<DefaultDeserializer as Deserializer<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::Deserializer::Error`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:917:17\n    |\n917 |     type Error: Error;\n    |                 ^^^^^ required by this bound in `Deserializer::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:322:18\n     |\n322  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<EnumDeserializer as EnumAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<EnumDeserializer as EnumAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::EnumAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1987:17\n     |\n1987 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `EnumAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:335:11\n     |\n335  | impl<'de> IntoDeserializer<'de, Error> for DefaultDeserializer {\n     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the trait `serde::de::Error` is implemented for `Error`\n     = note: required for `Error` to implement `serde::de::Error`\nnote: required by a bound in `IntoDeserializer`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:2259:36\n     |\n2259 | pub trait IntoDeserializer<'de, E: Error = value::Error> {\n     |                                    ^^^^^ required by this bound in `IntoDeserializer`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:346:18\n     |\n346  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<VariantDeserializer as VariantAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<VariantDeserializer as VariantAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::VariantAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:2034:17\n     |\n2034 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `VariantAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:381:18\n     |\n381  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<SeqDeserializer as SeqAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<SeqDeserializer as SeqAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::SeqAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1713:17\n     |\n1713 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `SeqAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:398:18\n     |\n398  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<MapDeserializer as MapAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<MapDeserializer as MapAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::MapAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1795:17\n     |\n1795 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `MapAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n   --> src/lib.rs:464:18\n    |\n464 |     type Error = Error;\n    |                  ^^^^^ `Error` cannot be formatted with the default formatter\n    |\n    = help: the trait `Display` is not implemented for `Error`, which is required by `<BorrowedCowStrDeserializer as Deserializer<'de>>::Error: serde::de::Error`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: the following other types implement trait `serde::de::Error`:\n              Error\n              serde::de::value::Error\n    = note: required for `<BorrowedCowStrDeserializer as Deserializer<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::Deserializer::Error`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:917:17\n    |\n917 |     type Error: Error;\n    |                 ^^^^^ required by this bound in `Deserializer::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:493:18\n     |\n493  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<BorrowedCowStrDeserializer as EnumAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<BorrowedCowStrDeserializer as EnumAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::EnumAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1987:17\n     |\n1987 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `EnumAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n    --> src/lib.rs:508:18\n     |\n508  |     type Error = Error;\n     |                  ^^^^^ `Error` cannot be formatted with the default formatter\n     |\n     = help: the trait `Display` is not implemented for `Error`, which is required by `<UnitOnly as VariantAccess<'de>>::Error: serde::de::Error`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = help: the following other types implement trait `serde::de::Error`:\n               Error\n               serde::de::value::Error\n     = note: required for `<UnitOnly as VariantAccess<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::de::VariantAccess::Error`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:2034:17\n     |\n2034 |     type Error: Error;\n     |                 ^^^^^ required by this bound in `VariantAccess::Error`\n\nerror[E0277]: `Error` doesn't implement `Display`\n   --> src/number.rs:41:18\n    |\n41  |     type Error = Error;\n    |                  ^^^^^ `Error` cannot be formatted with the default formatter\n    |\n    = help: the trait `Display` is not implemented for `Error`, which is required by `<number::Number as Deserializer<'de>>::Error: serde::de::Error`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: the following other types implement trait `serde::de::Error`:\n              Error\n              serde::de::value::Error\n    = note: required for `<number::Number as Deserializer<'de>>::Error` to implement `serde::de::Error`\nnote: required by a bound in `serde::Deserializer::Error`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:917:17\n    |\n917 |     type Error: Error;\n    |                 ^^^^^ required by this bound in `Deserializer::Error`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n  --> src/lib.rs:86:15\n   |\n86 |         Error(Box::new(msg.to_string()))\n   |               ^^^ use of undeclared type `Box`\n\nSome errors have detailed explanations: E0277, E0412, E0433.\nFor more information about an error, try `rustc --explain E0277`.\nwarning: `default-from-serde` (lib) generated 2 warnings\nerror: could not compile `default-from-serde` (lib) due to 17 previous errors; 2 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/default-from-serde-0.1.2/src",
    "time_to_build": 13004,
    "time_to_solve": 29
  }
]