[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling common_traits v0.10.2 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/common_traits-0.10.2)\nerror[E0432]: unresolved import `core::sync::atomic::AtomicU64`\n --> src/atomic_float.rs:2:37\n  |\n2 | use core::sync::atomic::{AtomicU32, AtomicU64, Ordering};\n  |                                     ^^^^^^^^^\n  |                                     |\n  |                                     no `AtomicU64` in `sync::atomic`\n  |                                     help: a similar name exists in the module: `AtomicU32`\n\nerror[E0412]: cannot find type `AtomicU64` in this scope\n   --> src/impls.rs:781:24\n    |\n781 | impl_into_atomic!(u64, AtomicU64);\n    |                        ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nerror[E0412]: cannot find type `AtomicI64` in this scope\n   --> src/impls.rs:787:24\n    |\n787 | impl_into_atomic!(i64, AtomicI64);\n    |                        ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nerror[E0412]: cannot find type `AtomicI64` in this scope\n   --> src/impls.rs:793:22\n    |\n793 | impl_atomic_integer!(AtomicI64);\n    |                      ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nerror[E0412]: cannot find type `AtomicU64` in this scope\n   --> src/impls.rs:798:22\n    |\n798 | impl_atomic_integer!(AtomicU64);\n    |                      ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nerror[E0412]: cannot find type `AtomicI64` in this scope\n   --> src/impls.rs:804:25\n    |\n804 | impl_atomic_signed_int!(AtomicI64);\n    |                         ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nerror[E0412]: cannot find type `AtomicU64` in this scope\n   --> src/impls.rs:809:27\n    |\n809 | impl_atomic_unsigned_int!(AtomicU64);\n    |                           ^^^^^^^^^ help: a struct with a similar name exists: `AtomicF64`\n    |\n   ::: src/atomic_float.rs:10:1\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------------------- similarly named struct `AtomicF64` defined here\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/fastrange.rs:178:15\n    |\n178 |         #[cfg(target_pointer_width = $pw)]\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n210 | impl_usize!(u8, \"8\", u16);\n    | ------------------------- in this macro invocation\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: this warning originates in the macro `impl_usize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/select_in_word.rs:289:15\n    |\n289 |         #[cfg(target_pointer_width = $pw)]\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n299 | impl_usize!(u8, \"8\");\n    | -------------------- in this macro invocation\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `impl_usize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/select_in_word.rs:289:15\n    |\n289 |         #[cfg(target_pointer_width = $pw)]\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n303 | impl_usize!(u128, \"128\");\n    | ------------------------ in this macro invocation\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `impl_usize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/upcastable.rs:53:5\n   |\n53 |     target_pointer_width = \"8\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/upcastable.rs:57:5\n   |\n57 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/upcastable.rs:66:7\n   |\n66 | #[cfg(target_pointer_width = \"8\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/upcastable.rs:78:5\n   |\n78 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/upcastable.rs:87:11\n   |\n87 | #[cfg(any(target_pointer_width = \"8\", target_pointer_width = \"16\"))]\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/upcastable.rs:98:5\n   |\n98 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:108:5\n    |\n108 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:119:40\n    |\n119 | #[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"128\",))]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:128:5\n    |\n128 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:140:7\n    |\n140 | #[cfg(target_pointer_width = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:149:5\n    |\n149 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:153:5\n    |\n153 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:163:5\n    |\n163 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:167:5\n    |\n167 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:176:7\n    |\n176 | #[cfg(target_pointer_width = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:188:5\n    |\n188 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:197:11\n    |\n197 | #[cfg(any(target_pointer_width = \"8\", target_pointer_width = \"16\"))]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:208:5\n    |\n208 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:218:5\n    |\n218 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:229:40\n    |\n229 | #[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"128\",))]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:238:5\n    |\n238 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:250:7\n    |\n250 | #[cfg(target_pointer_width = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/upcastable.rs:259:5\n    |\n259 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/upcastable.rs:263:5\n    |\n263 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/downcastable.rs:52:5\n   |\n52 |     target_pointer_width = \"8\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/downcastable.rs:56:5\n   |\n56 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/downcastable.rs:65:7\n   |\n65 | #[cfg(target_pointer_width = \"8\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/downcastable.rs:77:5\n   |\n77 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n  --> src/downcastable.rs:85:11\n   |\n85 | #[cfg(any(target_pointer_width = \"8\", target_pointer_width = \"16\",))]\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n  --> src/downcastable.rs:96:5\n   |\n96 |     target_pointer_width = \"128\",\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:106:5\n    |\n106 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:117:40\n    |\n117 | #[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"128\",))]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:126:5\n    |\n126 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:138:7\n    |\n138 | #[cfg(target_pointer_width = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:147:5\n    |\n147 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:151:5\n    |\n151 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:161:5\n    |\n161 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:165:5\n    |\n165 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:174:7\n    |\n174 | #[cfg(target_pointer_width = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:186:5\n    |\n186 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:194:11\n    |\n194 | #[cfg(any(target_pointer_width = \"8\", target_pointer_width = \"16\",))]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:205:5\n    |\n205 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:215:5\n    |\n215 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:226:40\n    |\n226 | #[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"128\",))]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:235:5\n    |\n235 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:247:7\n    |\n247 | #[cfg(target_pointer_width = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `8`\n   --> src/downcastable.rs:256:5\n    |\n256 |     target_pointer_width = \"8\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `128`\n   --> src/downcastable.rs:260:5\n    |\n260 |     target_pointer_width = \"128\",\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n771 | impl_unsigned_int!(u8, i8, NonZeroU8, NonZeroI8);\n    | ------------------------------------------------ in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n771 | impl_unsigned_int!(u8, i8, NonZeroU8, NonZeroI8);\n    | ------------------------------------------------ in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n772 | impl_unsigned_int!(u16, i16, NonZeroU16, NonZeroI16);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n772 | impl_unsigned_int!(u16, i16, NonZeroU16, NonZeroI16);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n773 | impl_unsigned_int!(u32, i32, NonZeroU32, NonZeroI32);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n773 | impl_unsigned_int!(u32, i32, NonZeroU32, NonZeroI32);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n774 | impl_unsigned_int!(u64, i64, NonZeroU64, NonZeroI64);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n774 | impl_unsigned_int!(u64, i64, NonZeroU64, NonZeroI64);\n    | ---------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n775 | impl_unsigned_int!(usize, isize, NonZeroUsize, NonZeroIsize);\n    | ------------------------------------------------------------ in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n775 | impl_unsigned_int!(usize, isize, NonZeroUsize, NonZeroIsize);\n    | ------------------------------------------------------------ in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n   --> src/impls.rs:349:9\n    |\n349 |         impl Number for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n776 | impl_unsigned_int!(u128, i128, NonZeroU128, NonZeroI128);\n    | -------------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:40:5\n    |\n40  |     fn pow(self, exp: Self) -> Self;\n    |     -------------------------------- `pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n   --> src/impls.rs:390:9\n    |\n390 |         impl FiniteRangeNumber for $ty {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n776 | impl_unsigned_int!(u128, i128, NonZeroU128, NonZeroI128);\n    | -------------------------------------------------------- in this macro invocation\n    |\n   ::: src/number.rs:92:5\n    |\n92  |     fn saturating_pow(self, rhs: Self) -> Self;\n    |     ------------------------------------------- `saturating_pow` from trait\n    |\n    = note: this error originates in the macro `impl_number` which comes from the expansion of the macro `impl_unsigned_int` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `pow`\n    --> src/impls.rs:1101:1\n     |\n1101 | impl Number for $ty {\n     | ^^^^^^^^^^^^^^^^^^^ missing `pow` in implementation\n...\n1860 | impl_float!(f32, AtomicF32, 0.0, 1.0, f64, AtomicF64, 0.0, 1.0,);\n     | ---------------------------------------------------------------- in this macro invocation\n     |\n    ::: src/number.rs:40:5\n     |\n40   |     fn pow(self, exp: Self) -> Self;\n     |     -------------------------------- `pow` from trait\n     |\n     = note: this error originates in the macro `impl_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0046]: not all trait items implemented, missing: `saturating_pow`\n    --> src/impls.rs:1130:1\n     |\n1130 | impl FiniteRangeNumber for $ty {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `saturating_pow` in implementation\n...\n1860 | impl_float!(f32, AtomicF32, 0.0, 1.0, f64, AtomicF64, 0.0, 1.0,);\n     | ---------------------------------------------------------------- in this macro invocation\n     |\n    ::: src/number.rs:92:5\n     |\n92   |     fn saturating_pow(self, rhs: Self) -> Self;\n     |     ------------------------------------------- `saturating_pow` from trait\n     |\n     = note: this error originates in the macro `impl_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `to_owned` found for type parameter `Self` in the current scope\n  --> src/unsigned_int.rs:56:36\n   |\n6  | / pub trait UnsignedInt:\n7  | |     IsSigned<Signed = False> + IsNonZero<NonZero = False> + Integer + Splat<u8>\n   | |_______________________________________________________________________________- method `to_owned` not found for this type parameter\n...\n56 |           self.wrapping_neg() & (rhs.to_owned() - Self::ONE)\n   |                                      ^^^^^^^^ method not found in `Self`\n   |\n  ::: /Users/graysonnocera/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/borrow.rs:59:8\n   |\n59 |       fn to_owned(&self) -> Self::Owned;\n   |          -------- the method is available for `Self` here\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToOwned` which provides `to_owned` is implemented but not in scope; perhaps you want to import it\n   |\n1  + use alloc::borrow::ToOwned;\n   |\n\nerror[E0599]: the method `as_ptr` exists for array `[AtomicF64; N]`, but its trait bounds were not satisfied\n   --> src/atomic_float.rs:57:33\n    |\n10  | pub struct AtomicF64(AtomicU64);\n    | -------------------- doesn't satisfy `atomic_float::AtomicF64: Sized`\n...\n57  |                 unsafe { *(data.as_ptr() as *const [Self::NonAtomicType; N]) }\n    |                                 ^^^^^^ method cannot be called on `[AtomicF64; N]` due to unsatisfied trait bounds\n...\n193 | impl_atomic_float!(f64, AtomicF64, AtomicU64);\n    | --------------------------------------------- in this macro invocation\n    |\n    = note: the following trait bounds were not satisfied:\n            `{type error}: Sized`\n            which is required by `atomic_float::AtomicF64: Sized`\n    = note: this error originates in the macro `impl_atomic_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `as_ptr` exists for array `[AtomicF64; N]`, but its trait bounds were not satisfied\n    --> src/impls.rs:1044:25\n     |\n1044 |         unsafe { *(data.as_ptr() as *const [Self; N]) }\n     |                         ^^^^^^ method cannot be called on `[AtomicF64; N]` due to unsatisfied trait bounds\n...\n1860 | impl_float!(f32, AtomicF32, 0.0, 1.0, f64, AtomicF64, 0.0, 1.0,);\n     | ---------------------------------------------------------------- in this macro invocation\n     |\n    ::: src/atomic_float.rs:10:1\n     |\n10   | pub struct AtomicF64(AtomicU64);\n     | -------------------- doesn't satisfy `atomic_float::AtomicF64: Sized`\n     |\n     = note: the following trait bounds were not satisfied:\n             `{type error}: Sized`\n             which is required by `atomic_float::AtomicF64: Sized`\n     = note: this error originates in the macro `impl_float` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0046, E0412, E0432, E0599.\nFor more information about an error, try `rustc --explain E0046`.\nwarning: `common_traits` (lib) generated 51 warnings\nerror: could not compile `common_traits` (lib) due to 38 previous errors; 51 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/common_traits-0.10.2/src",
    "time_to_build": 860,
    "time_to_solve": 208
  }
]