[
  {
    "built_with_features": "proto-ipv4",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features",
        "--features",
        "proto-ipv4"
      ],
      "code": 0,
      "stderr": "warning: unused import: `phy::Medium`\n --> src/phy/pcap_writer.rs:3:5\n  |\n3 | use phy::Medium;\n  |     ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `PrettyPrint`\n --> src/phy/tracer.rs:5:47\n  |\n5 | use crate::wire::pretty_print::{PrettyIndent, PrettyPrint};\n  |                                               ^^^^^^^^^^^\n\nwarning: unexpected `cfg` condition name: `fuzzing`\n   --> src/wire/icmpv4.rs:278:17\n    |\n278 |         if cfg!(fuzzing) {\n    |                 ^^^^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `fuzzing`\n   --> src/wire/ipv4.rs:453:17\n    |\n453 |         if cfg!(fuzzing) {\n    |                 ^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `fuzzing`\n   --> src/wire/tcp.rs:362:17\n    |\n362 |         if cfg!(fuzzing) {\n    |                 ^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `fuzzing`\n   --> src/wire/udp.rs:113:17\n    |\n113 |         if cfg!(fuzzing) {\n    |                 ^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `crate::phy::Medium`\n   --> src/wire/mod.rs:140:5\n    |\n140 | use crate::phy::Medium;\n    |     ^^^^^^^^^^^^^^^^^^\n\nwarning: unreachable statement\n   --> src/phy/pcap_writer.rs:140:9\n    |\n132 |           let link_type = match medium {\n    |  _________________________-\n133 | |             #[cfg(feature = \"medium-ip\")]\n134 | |             Medium::Ip => PcapLinkType::Ip,\n135 | |             #[cfg(feature = \"medium-ethernet\")]\n...   |\n138 | |             Medium::Ieee802154 => PcapLinkType::Ieee802154WithoutFcs,\n139 | |         };\n    | |_________- any code following this expression is unreachable\n140 |           sink.global_header(link_type);\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n\nwarning: unreachable expression\n   --> src/phy/mod.rs:329:9\n    |\n329 |         return panic!(\"No medium enabled\");\n    |         ^^^^^^^---------------------------\n    |         |      |\n    |         |      any code following this expression is unreachable\n    |         unreachable expression\n\nwarning: unreachable expression\n   --> src/phy/fault_injector.rs:208:12\n    |\n207 |         let mut caps = self.inner.capabilities();\n    |                        ------------------------- any code following this expression is unreachable\n208 |         if caps.max_transmission_unit > MTU {\n    |            ^^^^ unreachable expression\n    |\nnote: this expression has type `DeviceCapabilities`, which is uninhabited\n   --> src/phy/fault_injector.rs:207:24\n    |\n207 |         let mut caps = self.inner.capabilities();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused variable: `caps`\n   --> src/phy/fault_injector.rs:207:17\n    |\n207 |         let mut caps = self.inner.capabilities();\n    |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_caps`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not need to be mutable\n   --> src/phy/fault_injector.rs:207:13\n    |\n207 |         let mut caps = self.inner.capabilities();\n    |             ----^^^^\n    |             |\n    |             help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\nwarning: unreachable expression\n  --> src/phy/fuzz_injector.rs:58:12\n   |\n57 |         let mut caps = self.inner.capabilities();\n   |                        ------------------------- any code following this expression is unreachable\n58 |         if caps.max_transmission_unit > MTU {\n   |            ^^^^ unreachable expression\n   |\nnote: this expression has type `DeviceCapabilities`, which is uninhabited\n  --> src/phy/fuzz_injector.rs:57:24\n   |\n57 |         let mut caps = self.inner.capabilities();\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused variable: `caps`\n  --> src/phy/fuzz_injector.rs:57:17\n   |\n57 |         let mut caps = self.inner.capabilities();\n   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_caps`\n\nwarning: variable does not need to be mutable\n  --> src/phy/fuzz_injector.rs:57:13\n   |\n57 |         let mut caps = self.inner.capabilities();\n   |             ----^^^^\n   |             |\n   |             help: remove this `mut`\n\nwarning: unreachable definition\n   --> src/phy/pcap_writer.rs:132:13\n    |\n131 |         let medium = lower.capabilities().medium;\n    |                      -------------------- any code following this expression is unreachable\n132 |         let link_type = match medium {\n    |             ^^^^^^^^^ unreachable definition\n    |\nnote: this expression has type `DeviceCapabilities`, which is uninhabited\n   --> src/phy/pcap_writer.rs:131:22\n    |\n131 |         let medium = lower.capabilities().medium;\n    |                      ^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused variable: `medium`\n   --> src/phy/pcap_writer.rs:131:13\n    |\n131 |         let medium = lower.capabilities().medium;\n    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_medium`\n\nwarning: unused variable: `link_type`\n   --> src/phy/pcap_writer.rs:132:13\n    |\n132 |         let link_type = match medium {\n    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_link_type`\n\nwarning: unused variable: `sink`\n   --> src/phy/pcap_writer.rs:130:30\n    |\n130 |     pub fn new(lower: D, mut sink: S, mode: PcapMode) -> PcapWriter<D, S> {\n    |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_sink`\n\nwarning: unused variable: `mode`\n   --> src/phy/pcap_writer.rs:130:39\n    |\n130 |     pub fn new(lower: D, mut sink: S, mode: PcapMode) -> PcapWriter<D, S> {\n    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`\n\nwarning: variable does not need to be mutable\n   --> src/phy/pcap_writer.rs:130:26\n    |\n130 |     pub fn new(lower: D, mut sink: S, mode: PcapMode) -> PcapWriter<D, S> {\n    |                          ----^^^^\n    |                          |\n    |                          help: remove this `mut`\n\nwarning: unreachable expression\n  --> src/phy/tracer.rs:58:9\n   |\n57 |         let medium = self.inner.capabilities().medium;\n   |                      ------------------------- any code following this expression is unreachable\n58 |         self.inner.receive(timestamp).map(|(rx_token, tx_token)| {\n   |         ^^^^ unreachable expression\n   |\nnote: this expression has type `DeviceCapabilities`, which is uninhabited\n  --> src/phy/tracer.rs:57:22\n   |\n57 |         let medium = self.inner.capabilities().medium;\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused variable: `medium`\n  --> src/phy/tracer.rs:57:13\n   |\n57 |         let medium = self.inner.capabilities().medium;\n   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_medium`\n\nwarning: unused variable: `timestamp`\n  --> src/phy/tracer.rs:56:27\n   |\n56 |     fn receive(&mut self, timestamp: Instant) -> Option<(Self::RxToken<'_>, Self::TxToken<'_>)> {\n   |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`\n\nwarning: unreachable expression\n  --> src/phy/tracer.rs:77:9\n   |\n76 |         let medium = self.inner.capabilities().medium;\n   |                      ------------------------- any code following this expression is unreachable\n77 |         self.inner.transmit(timestamp).map(|tx_token| TxToken {\n   |         ^^^^ unreachable expression\n   |\nnote: this expression has type `DeviceCapabilities`, which is uninhabited\n  --> src/phy/tracer.rs:76:22\n   |\n76 |         let medium = self.inner.capabilities().medium;\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused variable: `medium`\n  --> src/phy/tracer.rs:76:13\n   |\n76 |         let medium = self.inner.capabilities().medium;\n   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_medium`\n\nwarning: unused variable: `timestamp`\n  --> src/phy/tracer.rs:75:28\n   |\n75 |     fn transmit(&mut self, timestamp: Instant) -> Option<Self::TxToken<'_>> {\n   |                            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`\n\nwarning: unused variable: `indent`\n   --> src/phy/tracer.rs:157:17\n    |\n157 |         let mut indent = PrettyIndent::new(self.prefix);\n    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_indent`\n\nwarning: unused variable: `f`\n   --> src/phy/tracer.rs:156:19\n    |\n156 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`\n\nwarning: variable does not need to be mutable\n   --> src/phy/tracer.rs:157:13\n    |\n157 |         let mut indent = PrettyIndent::new(self.prefix);\n    |             ----^^^^^^\n    |             |\n    |             help: remove this `mut`\n\nwarning: field `buffer` is never read\n   --> src/phy/tracer.rs:150:5\n    |\n149 | pub struct Packet<'a> {\n    |            ------ field in this struct\n150 |     buffer: &'a [u8],\n    |     ^^^^^^\n    |\n    = note: `#[warn(dead_code)]` on by default\n\nwarning: type alias `Rest` is never used\n  --> src/wire/mod.rs:75:14\n   |\n75 |     pub type Rest = ::core::ops::RangeFrom<usize>;\n   |              ^^^^\n\nwarning: method `emit_header` is never used\n   --> src/wire/udp.rs:256:19\n    |\n215 | impl Repr {\n    | --------- method in this implementation\n...\n256 |     pub(crate) fn emit_header<T: ?Sized>(&self, packet: &mut Packet<&mut T>, payload_len: usize)\n    |                   ^^^^^^^^^^^\n\nwarning: `smoltcp` (lib) generated 33 warnings (run `cargo fix --lib -p smoltcp` to apply 7 suggestions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/smoltcp-0.11.0/src",
    "time_to_build": 58,
    "time_to_solve": 1709
  }
]