[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling serde v1.0.215\n   Compiling futures v0.1.31\n   Compiling serde_derive v1.0.215\nerror[E0463]: can't find crate for `std`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/lib.rs:165:1\n    |\n165 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0432]: unresolved imports `super::core`, `super::BorrowedTask`, `super::NotifyHandle`, `super::Spawn`, `super::spawn`, `super::Notify`, `super::UnsafeNotify`, `task_impl::with`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:14:5\n   |\n14 | use super::core;\n   |     ^^^^^^^^^^^\n15 | use super::{BorrowedTask, NotifyHandle, Spawn, spawn, Notify, UnsafeNotify};\n   |             ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^  ^^^^^^  ^^^^^^^^^^^^\n   |\n  ::: /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/data.rs:8:5\n   |\n8  | use task_impl::with;\n   |     ^^^^^^^^^^^^^^^\n\nerror: cannot find macro `thread_local` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:30:1\n   |\n30 | thread_local!(static CURRENT_TASK: Cell<*mut u8> = Cell::new(ptr::null_mut()));\n   | ^^^^^^^^^^^^\n   |\n   = note: `thread_local` is in scope, but it is an attribute: `#[thread_local]`\n\nerror: cannot find macro `thread_local` in this scope\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:474:1\n    |\n474 | thread_local! {\n    | ^^^^^^^^^^^^\n    |\n    = note: `thread_local` is in scope, but it is an attribute: `#[thread_local]`\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/catch_unwind.rs:28:18\n   |\n28 |     type Error = Box<Any + Send>;\n   |                  ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/join_all.rs:26:12\n   |\n26 |     elems: Vec<ElemState<<I::Item as IntoFuture>::Future>>,\n   |            ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/join_all.rs:90:17\n   |\n90 |     type Item = Vec<<I::Item as IntoFuture>::Item>;\n   |                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_all.rs:16:12\n   |\n16 |     inner: Vec<A>,\n   |            ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_all.rs:48:34\n   |\n48 |     type Item = (A::Item, usize, Vec<A>);\n   |                                  ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_all.rs:49:36\n   |\n49 |     type Error = (A::Error, usize, Vec<A>);\n   |                                    ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_ok.rs:17:12\n   |\n17 |     inner: Vec<A>,\n   |            ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_ok.rs:44:27\n   |\n44 |     type Item = (A::Item, Vec<A>);\n   |                           ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/catch_unwind.rs:37:18\n   |\n37 |     type Error = Box<Any + Send>;\n   |                  ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:17:12\n   |\n17 |     items: Vec<S::Item>,\n   |            ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:58:27\n   |\n58 |     fn take(&mut self) -> Vec<S::Item> {\n   |                           ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:90:17\n   |\n90 |     type Item = Vec<<S as Stream>::Item>;\n   |                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:15:12\n   |\n15 |     items: Vec<S::Item>,\n   |            ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:28:29\n   |\n28 |     fn finish(&mut self) -> Vec<S::Item> {\n   |                             ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:36:17\n   |\n36 |     type Item = Vec<S::Item>;\n   |                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:39:32\n   |\n39 |     fn poll(&mut self) -> Poll<Vec<S::Item>, S::Error> {\n   |                                ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/data.rs:35:37\n   |\n35 | ...                   Box<Opaque>,\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find value `CURRENT_TASK` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:34:5\n   |\n34 |     CURRENT_TASK.with(|task| !task.get().is_null())\n   |     ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `CURRENT_TASK` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:46:14\n   |\n46 |         Some(CURRENT_TASK.with(|c| c.get()))\n   |              ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `CURRENT_TASK` in this scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:53:5\n   |\n53 |     CURRENT_TASK.with(|c| c as *const _)\n   |     ^^^^^^^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Box` in this scope\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:119:10\n    |\n119 |     Many(Box<[UnparkEvent]>),\n    |          ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Box` in this scope\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:405:18\n    |\n405 |     spawn: Spawn<Box<Future<Item = (), Error = ()> + Send>>,\n    |                  ^^^ not found in this scope\n\nerror[E0425]: cannot find value `CURRENT_THREAD_NOTIFY` in this scope\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:486:9\n    |\n486 |         CURRENT_THREAD_NOTIFY.with(|notify| f(notify))\n    |         ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0392]: type parameter `T` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/channel.rs:33:19\n   |\n33 | pub struct Sender<T, E> {\n   |                   ^ unused type parameter\n34 |     inner: mpsc::Sender<Result<T, E>>,\n   |                                - `T` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `E` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/channel.rs:33:22\n   |\n33 | pub struct Sender<T, E> {\n   |                      ^ unused type parameter\n34 |     inner: mpsc::Sender<Result<T, E>>,\n   |                                   - `E` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `E`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `E` to be a const parameter, use `const E: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/channel.rs:44:21\n   |\n44 | pub struct Receiver<T, E> {\n   |                     ^ unused type parameter\n45 |     inner: mpsc::Receiver<Result<T, E>>,\n   |                                  - `T` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `E` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/channel.rs:44:24\n   |\n44 | pub struct Receiver<T, E> {\n   |                        ^ unused type parameter\n45 |     inner: mpsc::Receiver<Result<T, E>>,\n   |                                     - `E` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `E`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `E` to be a const parameter, use `const E: /* Type */` instead\n\nerror[E0392]: type parameter `S` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/split.rs:10:24\n   |\n10 | pub struct SplitStream<S>(BiLock<S>);\n   |                        ^         - `S` is named here, but is likely unused in the containing type\n   |                        |\n   |                        unused type parameter\n   |\n   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `S` to be a const parameter, use `const S: /* Type */` instead\n\nerror[E0392]: type parameter `S` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/split.rs:35:22\n   |\n35 | pub struct SplitSink<S>(BiLock<S>);\n   |                      ^         - `S` is named here, but is likely unused in the containing type\n   |                      |\n   |                      unused type parameter\n   |\n   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `S` to be a const parameter, use `const S: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/split.rs:85:25\n   |\n85 | pub struct ReuniteError<T>(pub SplitSink<T>, pub SplitStream<T>);\n   |                         ^                -                   - `T` is named here, but is likely unused in the containing type\n   |                         |                |\n   |                         |                `T` is named here, but is likely unused in the containing type\n   |                         unused type parameter\n   |\n   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n   = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/futures_unordered.rs:110:14\n    |\n110 | enum Dequeue<T> {\n    |              ^ unused type parameter\n111 |     Data(*const Node<T>),\n    |                      - `T` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:111:28\n    |\n111 | pub struct UnboundedSender<T>(Sender<T>);\n    |                            ^         - `T` is named here, but is likely unused in the containing type\n    |                            |\n    |                            unused type parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:133:30\n    |\n133 | pub struct UnboundedReceiver<T>(Receiver<T>);\n    |                              ^           - `T` is named here, but is likely unused in the containing type\n    |                              |\n    |                              unused type parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `Item` is never used\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:1017:24\n     |\n1017 | pub struct SpawnHandle<Item, Error> {\n     |                        ^^^^ unused type parameter\n1018 |     rx: Receiver<Result<Item, Error>>,\n     |                         ---- `Item` is named here, but is likely unused in the containing type\n     |\n     = help: consider removing `Item`, referring to it in a field, or using a marker such as `PhantomData`\n     = help: if you intended `Item` to be a const parameter, use `const Item: /* Type */` instead\n\nerror[E0392]: type parameter `Error` is never used\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/mod.rs:1017:30\n     |\n1017 | pub struct SpawnHandle<Item, Error> {\n     |                              ^^^^^ unused type parameter\n1018 |     rx: Receiver<Result<Item, Error>>,\n     |                               ----- `Error` is named here, but is likely unused in the containing type\n     |\n     = help: consider removing `Error`, referring to it in a field, or using a marker such as `PhantomData`\n     = help: if you intended `Error` to be a const parameter, use `const Error: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/bilock.rs:184:25\n    |\n184 | pub struct ReuniteError<T>(pub BiLock<T>, pub BiLock<T>);\n    |                         ^             -              - `T` is named here, but is likely unused in the containing type\n    |                         |             |\n    |                         |             `T` is named here, but is likely unused in the containing type\n    |                         unused type parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/bilock.rs:212:28\n    |\n212 | pub struct BiLockGuard<'a, T: 'a> {\n    |                            ^ unused type parameter\n213 |     inner: &'a BiLock<T>,\n    |                       - `T` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/bilock.rs:238:26\n    |\n238 | pub struct BiLockAcquire<T> {\n    |                          ^ unused type parameter\n239 |     inner: Option<BiLock<T>>,\n    |                          - `T` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/bilock.rs:264:27\n    |\n264 | pub struct BiLockAcquired<T> {\n    |                           ^ unused type parameter\n265 |     inner: Option<BiLock<T>>,\n    |                          - `T` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/unsync/mpsc.rs:130:21\n    |\n130 | pub struct Receiver<T> {\n    |                     ^ unused type parameter\n131 |     state: State<T>,\n    |                  - `T` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/unsync/mpsc.rs:206:28\n    |\n206 | pub struct UnboundedSender<T>(Sender<T>);\n    |                            ^         - `T` is named here, but is likely unused in the containing type\n    |                            |\n    |                            unused type parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `T` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/unsync/mpsc.rs:282:30\n    |\n282 | pub struct UnboundedReceiver<T>(Receiver<T>);\n    |                              ^           - `T` is named here, but is likely unused in the containing type\n    |                              |\n    |                              unused type parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: /* Type */` instead\n\nerror[E0392]: type parameter `Item` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/unsync/mpsc.rs:351:24\n    |\n351 | pub struct SpawnHandle<Item, Error> {\n    |                        ^^^^ unused type parameter\n352 |     inner: Receiver<Result<Item, Error>>,\n    |                            ---- `Item` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `Item`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `Item` to be a const parameter, use `const Item: /* Type */` instead\n\nerror[E0392]: type parameter `Error` is never used\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/unsync/mpsc.rs:351:30\n    |\n351 | pub struct SpawnHandle<Item, Error> {\n    |                              ^^^^^ unused type parameter\n352 |     inner: Receiver<Result<Item, Error>>,\n    |                                  ----- `Error` is named here, but is likely unused in the containing type\n    |\n    = help: consider removing `Error`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `Error` to be a const parameter, use `const Error: /* Type */` instead\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/join_all.rs:117:34\n    |\n117 |                     self.elems = Vec::new();\n    |                                  ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/join_all.rs:124:55\n    |\n124 |             let elems = mem::replace(&mut self.elems, Vec::new());\n    |                                                       ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_all.rs:62:58\n   |\n62 |                 let rest = mem::replace(&mut self.inner, Vec::new());\n   |                                                          ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/future/select_ok.rs:64:70\n   |\n64 | ...                   let rest = mem::replace(&mut self.inner, Vec::new());\n   |                                                                ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:29:16\n   |\n29 |         items: Vec::with_capacity(capacity),\n   |                ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:60:39\n   |\n60 |         mem::replace(&mut self.items, Vec::with_capacity(cap))\n   |                                       ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/chunks.rs:116:70\n    |\n116 |                         let full_buf = mem::replace(&mut self.items, Vec::new());\n    |                                                                      ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:23:16\n   |\n23 |         items: Vec::new(),\n   |                ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/stream/collect.rs:29:39\n   |\n29 |         mem::replace(&mut self.items, Vec::new())\n   |                                       ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/data.rs:122:21\n    |\n122 |                     Box::new((self.__init)())\n    |                     ^^^ use of undeclared type `Box`\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:146:24\n    |\n146 |         let mut list = Vec::new();\n    |                        ^^^ use of undeclared type `Vec`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/task_impl/std/mod.rs:259:26\n    |\n259 |             spawn: spawn(Box::new(self.into_inner())),\n    |                          ^^^ use of undeclared type `Box`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/queue.rs:84:9\n   |\n84 |         Box::into_raw(Box::new(Node {\n   |         ^^^ use of undeclared type `Box`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/queue.rs:84:23\n   |\n84 |         Box::into_raw(Box::new(Node {\n   |                       ^^^ use of undeclared type `Box`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/queue.rs:132:18\n    |\n132 |             drop(Box::from_raw(tail));\n    |                  ^^^ use of undeclared type `Box`\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.1.31/src/sync/mpsc/queue.rs:146:22\n    |\n146 |                 drop(Box::from_raw(cur));\n    |                      ^^^ use of undeclared type `Box`\n\nSome errors have detailed explanations: E0392, E0412, E0425, E0432, E0433, E0463.\nFor more information about an error, try `rustc --explain E0392`.\nerror: could not compile `futures` (lib) due to 64 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/margo-fetch-0.1.0/src",
    "time_to_build": 13778,
    "time_to_solve": 28
  }
]