[
  {
    "built_with_features": "default",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi"
      ],
      "code": 0,
      "stderr": "warning: no edition set: defaulting to the 2015 edition while the latest is 2021\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:34:13\n   |\n34 | #![cfg_attr(has_extern_crate_alloc, no_std)]\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:37:7\n   |\n37 | #[cfg(has_extern_crate_alloc)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:40:7\n   |\n40 | #[cfg(has_extern_crate_alloc)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:42:7\n   |\n42 | #[cfg(has_extern_crate_alloc)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:44:7\n   |\n44 | #[cfg(has_extern_crate_alloc)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:46:7\n   |\n46 | #[cfg(has_extern_crate_alloc)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:49:11\n   |\n49 | #[cfg(not(has_extern_crate_alloc))]\n   |           ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:51:11\n   |\n51 | #[cfg(not(has_extern_crate_alloc))]\n   |           ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `has_extern_crate_alloc`\n  --> src/lib.rs:53:11\n   |\n53 | #[cfg(not(has_extern_crate_alloc))]\n   |           ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_extern_crate_alloc)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_extern_crate_alloc)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: `circular-queue` (lib) generated 9 warnings\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.01s\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/circular-queue-0.2.6/src",
    "time_to_build": 47,
    "time_to_solve": 42
  }
]