[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling zeroize v1.8.1\n   Compiling std-shims v0.1.1\n   Compiling flexible-transcript v0.3.2\n   Compiling multiexp v0.4.0\nerror[E0277]: the trait bound `Vec<(<G as Group>::Scalar, G)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:17:6\n    |\n17  | ) -> Zeroizing<Vec<(G::Scalar, G)>>\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(<G as Group>::Scalar, G)>`, which is required by `Vec<(<G as Group>::Scalar, G)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(<G as Group>::Scalar, G)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0277]: the trait bound `Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:28:3\n    |\n28  |   Zeroizing<Vec<(Id, Vec<(G::Scalar, G)>)>>,\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>`, which is required by `Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\n   Compiling ciphersuite v0.4.1\nerror[E0599]: the method `zeroize` exists for struct `Vec<Vec<u8>>`, but its trait bounds were not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/straus.rs:47:13\n    |\n47  |   groupings.zeroize();\n    |             ^^^^^^^ method cannot be called on `Vec<Vec<u8>>` due to unsatisfied trait bounds\n    |\n   ::: /Users/graysonnocera/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:1\n    |\n398 | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n    | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<Vec<u8>>: DefaultIsZeroes` or `Vec<Vec<u8>>: Zeroize`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<Vec<u8>>: DefaultIsZeroes`\n            which is required by `Vec<Vec<u8>>: Zeroize`\n\nerror[E0599]: the method `zeroize` exists for struct `Vec<Vec<u8>>`, but its trait bounds were not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/pippenger.rs:36:8\n    |\n36  |   bits.zeroize();\n    |        ^^^^^^^ method cannot be called on `Vec<Vec<u8>>` due to unsatisfied trait bounds\n    |\n   ::: /Users/graysonnocera/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:1\n    |\n398 | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n    | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<Vec<u8>>: DefaultIsZeroes` or `Vec<Vec<u8>>: Zeroize`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<Vec<u8>>: DefaultIsZeroes`\n            which is required by `Vec<Vec<u8>>: Zeroize`\n\nerror[E0277]: the trait bound `Vec<(<G as Group>::Scalar, G)>: Zeroize` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:21:18\n    |\n21  |   Zeroizing::new(slice.iter().flat_map(|pairs| pairs.1.iter()).copied().collect::<Vec<_>>())\n    |   -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(<G as Group>::Scalar, G)>`, which is required by `Vec<(<G as Group>::Scalar, G)>: Zeroize`\n    |   |\n    |   required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(<G as Group>::Scalar, G)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing::<Z>::new`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:625:8\n    |\n625 |     Z: Zeroize,\n    |        ^^^^^^^ required by this bound in `Zeroizing::<Z>::new`\n...\n630 |     pub fn new(value: Z) -> Self {\n    |            --- required by a bound in this associated function\n\nerror[E0277]: the trait bound `Vec<(<G as Group>::Scalar, G)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:21:3\n    |\n21  |   Zeroizing::new(slice.iter().flat_map(|pairs| pairs.1.iter()).copied().collect::<Vec<_>>())\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(<G as Group>::Scalar, G)>`, which is required by `Vec<(<G as Group>::Scalar, G)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(<G as Group>::Scalar, G)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0277]: the trait bound `Vec<(_, Vec<(_, _)>)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:28:3\n    |\n26  | #[derive(Clone, Zeroize)]\n    |          ----- in this derive macro expansion\n27  | pub struct BatchVerifier<Id: Copy + Zeroize, G: Group + Zeroize>(\n28  |   Zeroizing<Vec<(Id, Vec<(G::Scalar, G)>)>>,\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(_, Vec<(_, _)>)>`, which is required by `Vec<(_, Vec<(_, _)>)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(_, Vec<(_, _)>)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `zeroize` exists for mutable reference `&mut Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`, but its trait bounds were not satisfied\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:26:17\n   |\n26 | #[derive(Clone, Zeroize)]\n   |                 ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n           `&mut Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>: DefaultIsZeroes`\n           which is required by `&mut Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>: Zeroize`\n   = note: this error originates in the derive macro `Zeroize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<(_, Vec<(_, _)>)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:41:19\n    |\n41  |     BatchVerifier(Zeroizing::new(Vec::with_capacity(capacity)))\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(_, Vec<(_, _)>)>`, which is required by `Vec<(_, Vec<(_, _)>)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(_, Vec<(_, _)>)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0277]: the trait bound `Vec<(Id, Vec<(_, G)>)>: Zeroize` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:41:34\n    |\n41  |     BatchVerifier(Zeroizing::new(Vec::with_capacity(capacity)))\n    |                   -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(Id, Vec<(_, G)>)>`, which is required by `Vec<(Id, Vec<(_, G)>)>: Zeroize`\n    |                   |\n    |                   required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(Id, Vec<(_, G)>)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing::<Z>::new`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:625:8\n    |\n625 |     Z: Zeroize,\n    |        ^^^^^^^ required by this bound in `Zeroizing::<Z>::new`\n...\n630 |     pub fn new(value: Z) -> Self {\n    |            --- required by a bound in this associated function\n\nerror[E0277]: the trait bound `Vec<(Id, Vec<(_, G)>)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:41:19\n    |\n41  |     BatchVerifier(Zeroizing::new(Vec::with_capacity(capacity)))\n    |                   ^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(Id, Vec<(_, G)>)>`, which is required by `Vec<(Id, Vec<(_, G)>)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(Id, Vec<(_, G)>)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0599]: no method named `is_empty` found for struct `Zeroizing` in the current scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:52:23\n   |\n52 |     let u = if self.0.is_empty() {\n   |                       ^^^^^^^^ method not found in `Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`\n\nerror[E0599]: no method named `push` found for struct `Zeroizing` in the current scope\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:94:12\n   |\n94 |     self.0.push((id, pairs.into_iter().map(|(scalar, point)| (scalar * u, point)).collect()));\n   |            ^^^^ method not found in `Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`\n\nerror[E0308]: mismatched types\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:100:20\n    |\n100 |     multiexp(&flat(&self.0)).is_identity().into()\n    |               ---- ^^^^^^^ expected `&[(_, Vec<(_, _)>)]`, found `&Zeroizing<Vec<(Id, Vec<...>)>>`\n    |               |\n    |               arguments to this function are incorrect\n    |\n    = note: expected reference `&[(_, Vec<(_, _)>)]`\n               found reference `&Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`\nnote: function defined here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:15:4\n    |\n15  | fn flat<Id: Copy + Zeroize, G: Group + Zeroize>(\n    |    ^^^^\n16  |   slice: &[(Id, Vec<(G::Scalar, G)>)],\n    |   -----------------------------------\n\nerror[E0277]: the trait bound `Vec<(_, _)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:100:15\n    |\n100 |     multiexp(&flat(&self.0)).is_identity().into()\n    |               ^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(_, _)>`, which is required by `Vec<(_, _)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(_, _)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0308]: mismatched types\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:100:14\n    |\n100 |     multiexp(&flat(&self.0)).is_identity().into()\n    |     -------- ^^^^^^^^^^^^^^ expected `&[(_, _)]`, found `&Zeroizing<Vec<(_, _)>>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&[(_, _)]`\n               found reference `&Zeroizing<Vec<(_, _)>>`\nnote: function defined here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/lib.rs:177:8\n    |\n177 | pub fn multiexp<G: Group>(pairs: &[(G::Scalar, G)]) -> G\n    |        ^^^^^^^^           ------------------------\n\nerror[E0308]: mismatched types\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:106:28\n    |\n106 |     multiexp_vartime(&flat(&self.0)).is_identity().into()\n    |                       ---- ^^^^^^^ expected `&[(_, Vec<(_, _)>)]`, found `&Zeroizing<Vec<(Id, Vec<...>)>>`\n    |                       |\n    |                       arguments to this function are incorrect\n    |\n    = note: expected reference `&[(_, Vec<(_, _)>)]`\n               found reference `&Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`\nnote: function defined here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:15:4\n    |\n15  | fn flat<Id: Copy + Zeroize, G: Group + Zeroize>(\n    |    ^^^^\n16  |   slice: &[(Id, Vec<(G::Scalar, G)>)],\n    |   -----------------------------------\n\nerror[E0277]: the trait bound `Vec<(_, _)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:106:23\n    |\n106 |     multiexp_vartime(&flat(&self.0)).is_identity().into()\n    |                       ^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(_, _)>`, which is required by `Vec<(_, _)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(_, _)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0308]: mismatched types\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:106:22\n    |\n106 |     multiexp_vartime(&flat(&self.0)).is_identity().into()\n    |     ---------------- ^^^^^^^^^^^^^^ expected `&[(_, _)]`, found `&Zeroizing<Vec<(_, _)>>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&[(_, _)]`\n               found reference `&Zeroizing<Vec<(_, _)>>`\nnote: function defined here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/lib.rs:192:8\n    |\n192 | pub fn multiexp_vartime<G: Group>(pairs: &[(G::Scalar, G)]) -> G\n    |        ^^^^^^^^^^^^^^^^           ------------------------\n\nerror[E0599]: no method named `as_slice` found for struct `Zeroizing` in the current scope\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:115:28\n    |\n115 |     let mut slice = self.0.as_slice();\n    |                            ^^^^^^^^ method not found in `Zeroizing<Vec<(Id, Vec<(<G as Group>::Scalar, G)>)>>`\n\nerror[E0277]: the trait bound `Vec<(_, _)>: DefaultIsZeroes` is not satisfied\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:118:28\n    |\n118 |       if multiexp_vartime(&flat(&slice[.. split])).is_identity().into() {\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ the trait `DefaultIsZeroes` is not implemented for `Vec<(_, _)>`, which is required by `Vec<(_, _)>: Zeroize`\n    |\n    = help: the following other types implement trait `DefaultIsZeroes`:\n              ()\n              PhantomPinned\n              bool\n              char\n              f32\n              f64\n              i128\n              i16\n            and 10 others\n    = note: required for `Vec<(_, _)>` to implement `Zeroize`\nnote: required by a bound in `Zeroizing`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs:621:25\n    |\n621 | pub struct Zeroizing<Z: Zeroize>(Z);\n    |                         ^^^^^^^ required by this bound in `Zeroizing`\n\nerror[E0308]: mismatched types\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/batch.rs:118:27\n    |\n118 |       if multiexp_vartime(&flat(&slice[.. split])).is_identity().into() {\n    |          ---------------- ^^^^^^^^^^^^^^^^^^^^^^^ expected `&[(_, _)]`, found `&Zeroizing<Vec<(_, _)>>`\n    |          |\n    |          arguments to this function are incorrect\n    |\n    = note: expected reference `&[(_, _)]`\n               found reference `&Zeroizing<Vec<(_, _)>>`\nnote: function defined here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiexp-0.4.0/src/lib.rs:192:8\n    |\n192 | pub fn multiexp_vartime<G: Group>(pairs: &[(G::Scalar, G)]) -> G\n    |        ^^^^^^^^^^^^^^^^           ------------------------\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `multiexp` (lib) due to 22 previous errors\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/schnorr-signatures-0.5.1/src",
    "time_to_build": 482,
    "time_to_solve": 30
  }
]