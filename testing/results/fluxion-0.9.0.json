[
  {
    "built_with_features": "default",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi"
      ],
      "code": 0,
      "stderr": "warning: unexpected `cfg` condition name: `async_trait`\n --> src/lib.rs:5:17\n  |\n5 | #![cfg_attr(not(async_trait), feature(async_fn_in_trait))]\n  |                 ^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `error_policy`\n  --> src/lib.rs:22:7\n   |\n22 | #[cfg(error_policy)]\n   |       ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/lib.rs:26:7\n   |\n26 | #[cfg(tracing)]\n   |       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/lib.rs:28:11\n   |\n28 | #[cfg(not(tracing))]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `serde`\n  --> src/lib.rs:61:7\n   |\n61 | #[cfg(serde)]\n   |       ^^^^^ help: found config with similar value: `feature = \"serde\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(serde)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(serde)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `serde`\n  --> src/types/mod.rs:12:7\n   |\n12 | #[cfg(serde)]\n   |       ^^^^^ help: found config with similar value: `feature = \"serde\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(serde)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(serde)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/types/errors.rs:5:7\n  |\n5 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/types/errors.rs:11:12\n   |\n11 | #[cfg_attr(foreign, derive(Serialize, Deserialize))]\n   |            ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/types/errors.rs:27:12\n   |\n27 | #[cfg_attr(foreign, derive(Serialize, Deserialize))]\n   |            ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/types/errors.rs:39:7\n   |\n39 | #[cfg(foreign)]\n   |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `serde`\n --> src/types/params.rs:7:7\n  |\n7 | #[cfg(serde)]\n  |       ^^^^^ help: found config with similar value: `feature = \"serde\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(serde)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(serde)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `serde`\n  --> src/types/params.rs:19:11\n   |\n19 |     #[cfg(serde)]\n   |           ^^^^^ help: found config with similar value: `feature = \"serde\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(serde)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(serde)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `serde`\n --> src/types/serialize.rs:9:7\n  |\n9 | #[cfg(serde)]\n  |       ^^^^^ help: found config with similar value: `feature = \"serde\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(serde)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(serde)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n  --> src/actor/mod.rs:13:7\n   |\n13 | #[cfg(error_policy)]\n   |       ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/actor/mod.rs:17:7\n   |\n17 | #[cfg(async_trait)]\n   |       ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/actor/mod.rs:68:12\n   |\n68 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/actor/context.rs:4:7\n  |\n4 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/actor/context.rs:51:12\n   |\n51 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/actor/context.rs:65:11\n   |\n65 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/actor/context.rs:95:11\n   |\n95 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/actor/context.rs:105:15\n    |\n105 |     #[cfg(not(foreign))]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n --> src/actor/handle.rs:6:7\n  |\n6 | #[cfg(tracing)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/actor/handle.rs:18:12\n   |\n18 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n   --> src/actor/handle.rs:151:12\n    |\n151 | #[cfg_attr(async_trait, async_trait::async_trait)]\n    |            ^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n   --> src/actor/handle.rs:159:12\n    |\n159 | #[cfg_attr(async_trait, async_trait::async_trait)]\n    |            ^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/actor/handle.rs:65:16\n   |\n65 |     #[cfg_attr(tracing, tracing::instrument(skip(self, message)))]\n   |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/handle.rs:103:16\n    |\n103 |     #[cfg_attr(tracing, tracing::instrument(skip(self, message)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/handle.rs:126:16\n    |\n126 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/actor/handle.rs:77:15\n   |\n77 |         #[cfg(tracing)]\n   |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/actor/handle.rs:88:15\n   |\n88 |         #[cfg(tracing)]\n   |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/handle.rs:108:15\n    |\n108 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/handle.rs:129:15\n    |\n129 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/handle.rs:167:16\n    |\n167 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n --> src/actor/supervisor.rs:8:7\n  |\n8 | #[cfg(tracing)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n  --> src/actor/supervisor.rs:14:7\n   |\n14 | #[cfg(error_policy)]\n   |       ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/actor/supervisor.rs:62:16\n   |\n62 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n   |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:172:16\n    |\n172 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:273:16\n    |\n273 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/actor/supervisor.rs:70:15\n   |\n70 |         #[cfg(tracing)]\n   |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:108:27\n    |\n108 |                     #[cfg(tracing)]\n    |                           ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:119:35\n    |\n119 |                         #[cfg(not(error_policy))]\n    |                                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:124:31\n    |\n124 |                         #[cfg(error_policy)]\n    |                               ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:139:39\n    |\n139 | ...                   #[cfg(tracing)]\n    |                             ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:176:15\n    |\n176 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:222:15\n    |\n222 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:187:23\n    |\n187 |             #[cfg(not(error_policy))]\n    |                       ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:192:19\n    |\n192 |             #[cfg(error_policy)]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:203:23\n    |\n203 |                 #[cfg(tracing)]\n    |                       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:233:23\n    |\n233 |             #[cfg(not(error_policy))]\n    |                       ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n   --> src/actor/supervisor.rs:238:19\n    |\n238 |             #[cfg(error_policy)]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:249:23\n    |\n249 |                 #[cfg(tracing)]\n    |                       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/actor/supervisor.rs:277:15\n    |\n277 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_policy`\n  --> src/actor/mod.rs:74:11\n   |\n74 |     #[cfg(error_policy)]\n   |           ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_policy)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_policy)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/message/mod.rs:8:7\n  |\n8 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/mod.rs:12:7\n   |\n12 | #[cfg(async_trait)]\n   |       ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/mod.rs:36:12\n   |\n36 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/mod.rs:50:12\n   |\n50 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n --> src/message/inverted.rs:7:7\n  |\n7 | #[cfg(async_trait)]\n  |       ^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/inverted.rs:13:12\n   |\n13 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/inverted.rs:47:12\n   |\n47 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/foreign.rs:11:7\n   |\n11 | #[cfg(async_trait)]\n   |       ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/message/foreign.rs:56:12\n   |\n56 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/message/foreign.rs:60:16\n   |\n60 |     #[cfg_attr(tracing, tracing::instrument(skip(self, message)))]\n   |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/system.rs:5:7\n  |\n5 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n  --> src/system.rs:12:12\n   |\n12 | #[cfg_attr(async_trait, async_trait::async_trait)]\n   |            ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/system.rs:30:11\n   |\n30 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/system.rs:43:11\n   |\n43 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/system.rs:50:15\n   |\n50 |     #[cfg(not(foreign))]\n   |               ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/fluxion.rs:3:7\n  |\n3 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n --> src/fluxion.rs:6:7\n  |\n6 | #[cfg(foreign)]\n  |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/fluxion.rs:12:7\n   |\n12 | #[cfg(tracing)]\n   |       ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:26:7\n   |\n26 | #[cfg(foreign)]\n   |       ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `async_trait`\n   --> src/fluxion.rs:358:12\n    |\n358 | #[cfg_attr(async_trait, async_trait::async_trait)]\n    |            ^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(async_trait)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(async_trait)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:42:11\n   |\n42 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:45:11\n   |\n45 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:53:72\n   |\n53 | ...ne(), id: self.id.clone(), #[cfg(foreign)] foreign: self.foreign.clone(), #[cfg(foreign)] outbound_foreign: self.outbound_foreign.clon...\n   |                                     ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:53:119\n   |\n53 | ...ign: self.foreign.clone(), #[cfg(foreign)] outbound_foreign: self.outbound_foreign.clone(), _phantom: PhantomData }\n   |                                     ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:73:11\n   |\n73 |     #[cfg(foreign)]\n   |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n  --> src/fluxion.rs:92:16\n   |\n92 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n   |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:132:11\n    |\n132 |     #[cfg(foreign)]\n    |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:133:16\n    |\n133 |     #[cfg_attr(tracing, tracing::instrument(skip(self, message)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:159:16\n    |\n159 |     #[cfg_attr(tracing, tracing::instrument(skip(self, actor)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:218:16\n    |\n218 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:246:16\n    |\n246 |     #[cfg_attr(tracing, tracing::instrument(skip(self)))]\n    |                ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:247:11\n    |\n247 |     #[cfg(foreign)]\n    |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:312:15\n    |\n312 |     #[cfg(not(foreign))]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:64:19\n   |\n64 |             #[cfg(foreign)]\n   |                   ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n  --> src/fluxion.rs:66:19\n   |\n66 |             #[cfg(foreign)]\n   |                   ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:162:15\n    |\n162 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:193:15\n    |\n193 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:200:19\n    |\n200 |             #[cfg(tracing)]\n    |                   ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:221:15\n    |\n221 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:254:15\n    |\n254 |         #[cfg(tracing)]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:277:19\n    |\n277 |             #[cfg(tracing)]\n    |                   ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `tracing`\n   --> src/fluxion.rs:291:19\n    |\n291 |             #[cfg(tracing)]\n    |                   ^^^^^^^ help: found config with similar value: `feature = \"tracing\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:372:11\n    |\n372 |     #[cfg(foreign)]\n    |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:452:11\n    |\n452 |     #[cfg(foreign)]\n    |           ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `foreign`\n   --> src/fluxion.rs:462:15\n    |\n462 |     #[cfg(not(foreign))]\n    |               ^^^^^^^ help: found config with similar value: `feature = \"foreign\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(foreign)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(foreign)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: `fluxion` (lib) generated 98 warnings\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.07s\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/fluxion-0.9.0/src",
    "time_to_build": 105,
    "time_to_solve": 71
  }
]