[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling s2n-quic-platform v0.32.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/s2n-quic-platform-0.32.0)\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/socket/task/events.rs:60:13\n   |\n60 |         use std::io::ErrorKind::*;\n   |             ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/socket/task/events.rs:131:13\n    |\n131 |         use std::io::ErrorKind::*;\n    |             ^^^ use of undeclared crate or module `std`\n\nerror[E0432]: unresolved imports `s2n_quic_core::sync::atomic_waker`, `s2n_quic_core::sync::CachePadded`\n  --> src/socket/ring.rs:76:9\n   |\n76 |         atomic_waker,\n   |         ^^^^^^^^^^^^ no `atomic_waker` in `sync`\n77 |         cursor::{self, Cursor},\n78 |         CachePadded,\n   |         ^^^^^^^^^^^ no `CachePadded` in `sync`\n   |\nnote: found an item that was configured out\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-core-0.32.0/src/sync.rs:10:9\n   |\n10 | pub mod atomic_waker;\n   |         ^^^^^^^^^^^^\nnote: the item is gated behind the `atomic-waker` feature\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-core-0.32.0/src/sync.rs:9:7\n   |\n9  | #[cfg(feature = \"atomic-waker\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^\nnote: found an item that was configured out\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-core-0.32.0/src/sync.rs:8:26\n   |\n8  | pub use crossbeam_utils::CachePadded;\n   |                          ^^^^^^^^^^^\nnote: the item is gated behind the `crossbeam-utils` feature\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-core-0.32.0/src/sync.rs:7:7\n   |\n7  | #[cfg(feature = \"crossbeam-utils\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0432]: unresolved import `socket2`\n --> src/syscall.rs:8:5\n  |\n8 | use socket2::{Domain, Protocol, Socket, Type};\n  |     ^^^^^^^ use of undeclared crate or module `socket2`\n\nerror[E0432]: unresolved import `std`\n --> src/syscall.rs:9:5\n  |\n9 | use std::io;\n  |     ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n --> src/features.rs:5:14\n  |\n5 | type c_int = std::os::raw::c_int;\n  |              ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/features/gso.rs:173:51\n    |\n173 |         pub fn handle_socket_error(&self, error: &std::io::Error) -> Option<usize> {\n    |                                                   ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: could not find `std` in the list of imported crates\n  --> src/socket/task/events.rs:59:37\n   |\n59 |     fn on_error(&mut self, error: ::std::io::Error) -> ControlFlow<(), ()> {\n   |                                     ^^^ could not find `std` in the list of imported crates\n\nerror[E0433]: failed to resolve: could not find `std` in the list of imported crates\n   --> src/socket/task/events.rs:130:37\n    |\n130 |     fn on_error(&mut self, error: ::std::io::Error) -> ControlFlow<(), ()> {\n    |                                     ^^^ could not find `std` in the list of imported crates\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/syscall.rs:78:20\n   |\n78 | pub fn bind_udp<A: std::net::ToSocketAddrs>(addr: A, reuse_port: bool) -> io::Result<Socket> {\n   |                    ^^^ use of undeclared crate or module `std`\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/socket/io/rx.rs:15:15\n   |\n15 |     channels: Vec<Consumer<T>>,\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n4  + use alloc::vec::Vec;\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/socket/io/rx.rs:22:26\n   |\n22 |     pub fn new(channels: Vec<Consumer<T>>, max_mtu: MaxMtu, local_address: LocalAddress) -> Self {\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n4  + use alloc::vec::Vec;\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/socket/io/tx.rs:15:15\n   |\n15 |     channels: Vec<Producer<T>>,\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n4  + use alloc::vec::Vec;\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/socket/io/tx.rs:23:26\n   |\n23 |     pub fn new(channels: Vec<Producer<T>>, gso: Gso, max_mtu: MaxMtu) -> Self {\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n4  + use alloc::vec::Vec;\n   |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/syscall.rs:62:25\n   |\n62 | pub fn udp_socket(addr: std::net::SocketAddr) -> io::Result<Socket> {\n   |                         ^^^ use of undeclared crate or module `std`\n   |\nhelp: consider importing this module\n   |\n7  + use core::net;\n   |\nhelp: if you import `net`, refer to it directly\n   |\n62 - pub fn udp_socket(addr: std::net::SocketAddr) -> io::Result<Socket> {\n62 + pub fn udp_socket(addr: net::SocketAddr) -> io::Result<Socket> {\n   |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/syscall.rs:80:9\n   |\n80 |         std::io::Error::new(\n   |         ^^^ use of undeclared crate or module `std`\n   |\nhelp: consider importing one of these items\n   |\n7  + use core::error::Error;\n   |\n7  + use core::fmt::Error;\n   |\n7  + use alloc::fmt::Error;\n   |\n7  + use s2n_quic_core::application::Error;\n   |\n     and 7 other candidates\nhelp: if you import `Error`, refer to it directly\n   |\n80 -         std::io::Error::new(\n80 +         Error::new(\n   |\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n --> src/features/gro.rs:6:7\n  |\n6 | #[cfg(s2n_quic_platform_gro)]\n  |       ^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n  --> src/features/gro.rs:27:15\n   |\n27 | #[cfg(any(not(s2n_quic_platform_gro), test))]\n   |               ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n  --> src/features/gro.rs:47:15\n   |\n47 |     #[cfg(not(s2n_quic_platform_gro))]\n   |               ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n  --> src/features/gro.rs:49:11\n   |\n49 |     #[cfg(s2n_quic_platform_gro)]\n   |           ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n  --> src/features/gro.rs:55:37\n   |\n55 | pub const IS_SUPPORTED: bool = cfg!(s2n_quic_platform_gro);\n   |                                     ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gso`\n  --> src/features/gso.rs:61:7\n   |\n61 | #[cfg(s2n_quic_platform_gso)]\n   |       ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gso)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gso)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gso`\n   --> src/features/gso.rs:137:15\n    |\n137 | #[cfg(any(not(s2n_quic_platform_gso), test))]\n    |               ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gso)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gso)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gso`\n   --> src/features/gso.rs:188:15\n    |\n188 |     #[cfg(not(s2n_quic_platform_gso))]\n    |               ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gso)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gso)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gso`\n   --> src/features/gso.rs:190:11\n    |\n190 |     #[cfg(s2n_quic_platform_gso)]\n    |           ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gso)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gso)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gso`\n   --> src/features/gso.rs:197:37\n    |\n197 | pub const IS_SUPPORTED: bool = cfg!(s2n_quic_platform_gso);\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gso)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gso)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_cmsg`\n --> src/message.rs:7:7\n  |\n7 | #[cfg(s2n_quic_platform_cmsg)]\n  |       ^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_cmsg)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_cmsg)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_mmsg`\n --> src/message.rs:9:7\n  |\n9 | #[cfg(s2n_quic_platform_socket_mmsg)]\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_mmsg)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_mmsg)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_msg`\n  --> src/message.rs:11:7\n   |\n11 | #[cfg(s2n_quic_platform_socket_msg)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_msg)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_msg)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_mmsg`\n  --> src/message.rs:17:18\n   |\n17 |         if #[cfg(s2n_quic_platform_socket_mmsg)] {\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_mmsg)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_mmsg)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_msg`\n  --> src/message.rs:19:25\n   |\n19 |         } else if #[cfg(s2n_quic_platform_socket_msg)] {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_msg)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_msg)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_mmsg`\n  --> src/syscall.rs:23:7\n   |\n23 | #[cfg(s2n_quic_platform_socket_mmsg)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_mmsg)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_mmsg)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_socket_msg`\n  --> src/syscall.rs:25:7\n   |\n25 | #[cfg(s2n_quic_platform_socket_msg)]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_socket_msg)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_socket_msg)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_mtu_disc`\n   --> src/syscall.rs:135:11\n    |\n135 |     #[cfg(s2n_quic_platform_mtu_disc)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_mtu_disc)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_mtu_disc)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_tos`\n   --> src/syscall.rs:169:11\n    |\n169 |     #[cfg(s2n_quic_platform_tos)]\n    |           ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_tos)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_tos)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_pktinfo`\n   --> src/syscall.rs:202:11\n    |\n202 |     #[cfg(s2n_quic_platform_pktinfo)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_pktinfo)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_pktinfo)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `s2n_quic_platform_gro`\n   --> src/syscall.rs:232:11\n    |\n232 |     #[cfg(s2n_quic_platform_gro)]\n    |           ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(s2n_quic_platform_gro)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(s2n_quic_platform_gro)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nSome errors have detailed explanations: E0412, E0432, E0433.\nFor more information about an error, try `rustc --explain E0412`.\nwarning: `s2n-quic-platform` (lib) generated 21 warnings\nerror: could not compile `s2n-quic-platform` (lib) due to 16 previous errors; 21 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/s2n-quic-platform-0.32.0/src",
    "time_to_build": 1720,
    "time_to_solve": 267
  }
]