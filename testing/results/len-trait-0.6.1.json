[
  {
    "built_with_features": "alloc",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features",
        "--features",
        "alloc"
      ],
      "code": 101,
      "stderr": "warning: no edition set: defaulting to the 2015 edition while the latest is 2021\n   Compiling len-trait v0.6.1 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/len-trait-0.6.1)\nerror[E0432]: unresolved import `core::slice::SliceExt`\n   --> src/impls.rs:134:13\n    |\n134 |         use core::slice::SliceExt as Slice;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `SliceExt` in `slice`\n\nerror[E0432]: unresolved import `core::str::StrExt`\n   --> src/impls.rs:144:13\n    |\n144 |         use core::str::StrExt as Str;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ no `StrExt` in `str`\n\nerror[E0432]: unresolved import `alloc::arc`\n   --> src/impls.rs:161:28\n    |\n161 |                 use alloc::arc::Arc;\n    |                            ^^^ could not find `arc` in `alloc`\n\nerror[E0432]: unresolved imports `alloc::String`, `alloc::Vec`\n   --> src/impls.rs:162:50\n    |\n162 |                 use alloc::{self as collections, String, Vec};\n    |                                                  ^^^^^^  ^^^ no `Vec` in the root\n    |                                                  |\n    |                                                  no `String` in the root\n    |\n    = help: consider importing this struct instead:\n            alloc::string::String\n    = help: consider importing this struct instead:\n            alloc::vec::Vec\nhelp: a similar name exists in the module (notice the capitalization difference)\n    |\n162 |                 use alloc::{self as collections, string, Vec};\n    |                                                  ~~~~~~\nhelp: a similar name exists in the module (notice the capitalization difference)\n    |\n162 |                 use alloc::{self as collections, String, vec};\n    |                                                          ~~~\n\nerror[E0432]: unresolved imports `self::collections::BTreeMap`, `self::collections::BTreeSet`, `self::collections::BinaryHeap`, `self::collections::LinkedList`, `self::collections::VecDeque`\n   --> src/impls.rs:165:33\n    |\n165 |         use self::collections::{BTreeMap, BTreeSet, BinaryHeap, LinkedList, VecDeque};\n    |                                 ^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^ no `VecDeque` in the root\n    |                                 |         |         |           |\n    |                                 |         |         |           no `LinkedList` in the root\n    |                                 |         |         no `BinaryHeap` in the root\n    |                                 |         no `BTreeSet` in the root\n    |                                 no `BTreeMap` in the root\n    |\n    = help: consider importing this struct instead:\n            alloc::collections::BTreeMap\n    = help: consider importing this struct instead:\n            alloc::collections::BTreeSet\n    = help: consider importing this struct instead:\n            alloc::collections::BinaryHeap\n    = help: consider importing this struct instead:\n            alloc::collections::LinkedList\n    = help: consider importing this struct instead:\n            alloc::collections::VecDeque\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n  --> src/lib.rs:72:59\n   |\n72 | #![cfg_attr(all(not(feature = \"std\"), feature = \"alloc\"), feature(alloc))]\n   |                                                           ^^^^^^^^^^^^^^\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n  --> src/lib.rs:73:35\n   |\n73 | #![cfg_attr(not(feature = \"std\"), feature(core_slice_ext, core_str_ext))]\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unexpected `cfg` condition value: `bit-set`\n  --> src/lib.rs:81:7\n   |\n81 | #[cfg(feature = \"bit-set\")]\n   |       ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `bit-set` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `bit-vec`\n  --> src/lib.rs:84:7\n   |\n84 | #[cfg(feature = \"bit-vec\")]\n   |       ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `bit-vec` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `blist`\n  --> src/lib.rs:87:7\n   |\n87 | #[cfg(feature = \"blist\")]\n   |       ^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `blist` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `enum-set`\n  --> src/lib.rs:90:7\n   |\n90 | #[cfg(feature = \"enum-set\")]\n   |       ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `enum-set` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `interval-heap`\n  --> src/lib.rs:93:7\n   |\n93 | #[cfg(feature = \"interval-heap\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `interval-heap` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `linear-map`\n  --> src/lib.rs:96:7\n   |\n96 | #[cfg(feature = \"linear-map\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `linear-map` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `linked-hash-map`\n  --> src/lib.rs:99:7\n   |\n99 | #[cfg(feature = \"linked-hash-map\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `linked-hash-map` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `lru-cache`\n   --> src/lib.rs:102:7\n    |\n102 | #[cfg(feature = \"lru-cache\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n    = help: consider adding `lru-cache` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `vec_map`\n   --> src/lib.rs:105:7\n    |\n105 | #[cfg(feature = \"vec_map\")]\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n    = help: consider adding `vec_map` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `cargo-clippy`\n  --> src/len.rs:33:12\n   |\n33 | #[cfg_attr(feature = \"cargo-clippy\", allow(len_without_is_empty))]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `alloc`, `default`, `nightly`, and `std`\n   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `alloc` has been stable since 1.36.0 and no longer requires an attribute to enable\n  --> src/lib.rs:72:67\n   |\n72 | #![cfg_attr(all(not(feature = \"std\"), feature = \"alloc\"), feature(alloc))]\n   |                                                                   ^^^^^\n   |\n   = note: `#[warn(stable_features)]` on by default\n\nerror[E0635]: unknown feature `core_str_ext`\n  --> src/lib.rs:73:59\n   |\n73 | #![cfg_attr(not(feature = \"std\"), feature(core_slice_ext, core_str_ext))]\n   |                                                           ^^^^^^^^^^^^\n\nerror[E0635]: unknown feature `core_slice_ext`\n  --> src/lib.rs:73:43\n   |\n73 | #![cfg_attr(not(feature = \"std\"), feature(core_slice_ext, core_str_ext))]\n   |                                           ^^^^^^^^^^^^^^\n\nwarning: trait objects without an explicit `dyn` are deprecated\n   --> src/capacity.rs:166:12\n    |\n166 |         if Len::is_empty(self) {\n    |            ^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n    = note: `#[warn(bare_trait_objects)]` on by default\nhelp: if this is an object-safe trait, use `dyn`\n    |\n166 |         if <dyn Len>::is_empty(self) {\n    |            ++++    +\n\nSome errors have detailed explanations: E0432, E0554, E0635.\nFor more information about an error, try `rustc --explain E0432`.\nwarning: `len-trait` (lib) generated 12 warnings\nerror: could not compile `len-trait` (lib) due to 9 previous errors; 12 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std",
      "alloc"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/len-trait-0.6.1/src",
    "time_to_build": 79,
    "time_to_solve": 30
  }
]