[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling no-std-thiserror v0.1.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/no-std-thiserror-0.1.0)\n   Compiling no-std-thiserror-impl v1.0.56\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n  = note: `std` is required by `thiserror` because it does not declare `#![no_std]`\n\nerror[E0463]: can't find crate for `std`\n --> src/aserror.rs:1:5\n  |\n1 | use std::error::Error;\n  |     ^^^ can't find crate\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0463]: can't find crate for `std`\n --> src/aserror.rs:2:5\n  |\n2 | use std::panic::UnwindSafe;\n  |     ^^^ can't find crate\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0463]: can't find crate for `std`\n --> src/display.rs:1:5\n  |\n1 | use std::fmt::Display;\n  |     ^^^ can't find crate\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0463]: can't find crate for `std`\n --> src/display.rs:2:5\n  |\n2 | use std::path::{self, Path, PathBuf};\n  |     ^^^ can't find crate\n  |\n  = note: the `thumbv7m-none-eabi` target may not support the standard library\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:23:41\n   |\n23 | impl<'a> AsDynError<'a> for dyn Error + Send + 'a {\n   |                                         ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:30:41\n   |\n30 | impl<'a> AsDynError<'a> for dyn Error + Send + Sync + 'a {\n   |                                         ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n  --> src/aserror.rs:30:48\n   |\n30 | impl<'a> AsDynError<'a> for dyn Error + Send + Sync + 'a {\n   |                                                ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Sync;\n   |\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:37:41\n   |\n37 | impl<'a> AsDynError<'a> for dyn Error + Send + Sync + UnwindSafe + 'a {\n   |                                         ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n  --> src/aserror.rs:37:48\n   |\n37 | impl<'a> AsDynError<'a> for dyn Error + Send + Sync + UnwindSafe + 'a {\n   |                                                ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Sync;\n   |\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:48:33\n   |\n48 | impl<'a> Sealed for dyn Error + Send + 'a {}\n   |                                 ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:49:33\n   |\n49 | impl<'a> Sealed for dyn Error + Send + Sync + 'a {}\n   |                                 ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n  --> src/aserror.rs:49:40\n   |\n49 | impl<'a> Sealed for dyn Error + Send + Sync + 'a {}\n   |                                        ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Sync;\n   |\n\nerror[E0405]: cannot find trait `Send` in this scope\n  --> src/aserror.rs:50:33\n   |\n50 | impl<'a> Sealed for dyn Error + Send + Sync + UnwindSafe + 'a {}\n   |                                 ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Send;\n   |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n  --> src/aserror.rs:50:40\n   |\n50 | impl<'a> Sealed for dyn Error + Send + Sync + UnwindSafe + 'a {}\n   |                                        ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::marker::Sync;\n   |\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:240:13\n    |\n240 | #![cfg_attr(error_generic_member_access, feature(error_generic_member_access))]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `thiserror_nightly_testing`\n   --> src/lib.rs:242:11\n    |\n242 | #[cfg(all(thiserror_nightly_testing, not(error_generic_member_access)))]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thiserror_nightly_testing)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thiserror_nightly_testing)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:242:42\n    |\n242 | #[cfg(all(thiserror_nightly_testing, not(error_generic_member_access)))]\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:247:7\n    |\n247 | #[cfg(error_generic_member_access)]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `error_generic_member_access`\n   --> src/lib.rs:259:11\n    |\n259 |     #[cfg(error_generic_member_access)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(error_generic_member_access)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(error_generic_member_access)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nSome errors have detailed explanations: E0405, E0463.\nFor more information about an error, try `rustc --explain E0405`.\nwarning: `no-std-thiserror` (lib) generated 5 warnings\nerror: could not compile `no-std-thiserror` (lib) due to 15 previous errors; 5 warnings emitted\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/no-std-thiserror-0.1.0/src",
    "time_to_build": 802,
    "time_to_solve": 20
  }
]