[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "warning: no edition set: defaulting to the 2015 edition while the latest is 2021\n   Compiling thhp v0.2.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/thhp-0.2.0)\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --> src/lib.rs:2:35\n  |\n2 | #![cfg_attr(not(feature = \"std\"), feature(alloc))]\n  |                                   ^^^^^^^^^^^^^^\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n --> src/simd.rs:1:12\n  |\n1 | #![cfg(all(thhp_enable_sse42, any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n  |            ^^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n   --> src/lib.rs:326:7\n    |\n326 | #[cfg(thhp_enable_sse42)]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n --> src/scanner.rs:1:7\n  |\n1 | #[cfg(thhp_enable_sse42)]\n  |       ^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n --> src/scanner.rs:4:7\n  |\n4 | #[cfg(thhp_enable_sse42)]\n  |       ^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n  --> src/scanner.rs:77:11\n   |\n77 |     #[cfg(thhp_enable_sse42)]\n   |           ^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unnecessary parentheses around type\n   --> src/lib.rs:520:24\n    |\n520 |     ) -> Result<Status<(&'headers [HeaderField<'buffer>])>>\n    |                        ^                                ^\n    |\n    = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n    |\n520 -     ) -> Result<Status<(&'headers [HeaderField<'buffer>])>>\n520 +     ) -> Result<Status<&'headers [HeaderField<'buffer>]>>\n    |\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n   --> src/lib.rs:574:15\n    |\n574 |         #[cfg(thhp_enable_sse42)]\n    |               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `thhp_enable_sse42`\n   --> src/lib.rs:585:19\n    |\n585 |         #[cfg(not(thhp_enable_sse42))]\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thhp_enable_sse42)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thhp_enable_sse42)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `alloc` has been stable since 1.36.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:43\n  |\n2 | #![cfg_attr(not(feature = \"std\"), feature(alloc))]\n  |                                           ^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nFor more information about this error, try `rustc --explain E0554`.\nwarning: `thhp` (lib) generated 9 warnings\nerror: could not compile `thhp` (lib) due to 1 previous error; 9 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/thhp-0.2.0/src",
    "time_to_build": 503,
    "time_to_solve": 52
  }
]