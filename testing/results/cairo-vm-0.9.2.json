[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling serde v1.0.192\n   Compiling rand_core v0.6.4\n   Compiling num-traits v0.2.17\n   Compiling ppv-lite86 v0.2.17\n   Compiling syn v2.0.39\n   Compiling syn v1.0.109\n   Compiling typenum v1.17.0\n   Compiling num-integer v0.1.45\n   Compiling crypto-common v0.1.6\n   Compiling block-buffer v0.10.4\n   Compiling digest v0.10.7\n   Compiling paste v1.0.14\n   Compiling rand_chacha v0.3.1\n   Compiling num-bigint v0.4.4\n   Compiling rand v0.8.5\n   Compiling generic-array v0.14.7\n   Compiling either v1.9.0\n   Compiling itertools v0.10.5\n   Compiling subtle v2.5.0\n   Compiling ark-std v0.4.0\n   Compiling crypto-bigint v0.5.4\n   Compiling hex v0.4.3\n   Compiling ahash v0.8.6\n   Compiling radium v0.7.0\n   Compiling hmac v0.12.1\n   Compiling ark-serialize v0.4.2\n   Compiling spin v0.5.2\n   Compiling tap v1.0.1\n   Compiling anyhow v1.0.75\n   Compiling serde_json v1.0.108\n   Compiling zerocopy v0.7.26\n   Compiling wyz v0.5.1\n   Compiling lazy_static v1.4.0\n   Compiling rfc6979 v0.4.0\n   Compiling sha2 v0.10.8\n   Compiling ryu v1.0.15\n   Compiling memchr v2.6.4\n   Compiling keccak v0.1.4\n   Compiling funty v2.0.0\n   Compiling minimal-lexical v0.2.1\n   Compiling allocator-api2 v0.2.16\n   Compiling itoa v1.0.9\n   Compiling sha3 v0.10.8\n   Compiling nom v7.1.3\n   Compiling bitvec v1.0.1\n   Compiling serde_derive v1.0.192\n   Compiling zeroize_derive v1.4.2\n   Compiling ark-ff-macros v0.4.2\n   Compiling ark-ff-asm v0.4.2\n   Compiling derivative v2.2.0\n   Compiling thiserror-impl-no-std v2.0.2\n   Compiling zeroize v1.7.0\n   Compiling thiserror-no-std v2.0.2\n   Compiling ark-ff v0.4.2\n   Compiling bincode v2.0.0-rc.3\n   Compiling hashbrown v0.14.2\n   Compiling cairo-felt v0.9.1\n   Compiling starknet-ff v0.3.5\n   Compiling starknet-curve v0.4.0\n   Compiling starknet-crypto-codegen v0.3.2\n   Compiling starknet-crypto v0.6.1\n   Compiling cairo-vm v0.9.2 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/cairo-vm-0.9.2)\nerror: unused import: `core::borrow::*`\n  --> src/./without_std.rs:40:17\n   |\n40 |         pub use core::borrow::*;\n   |                 ^^^^^^^^^^^^^^^\n   |\nnote: the lint level is defined here\n  --> src/lib.rs:14:9\n   |\n14 | #![deny(warnings)]\n   |         ^^^^^^^^\n   = note: `#[deny(unused_imports)]` implied by `#[deny(warnings)]`\n\nerror: unexpected `cfg` condition name: `no_std`\n   --> src/vm/runners/cairo_pie.rs:121:47\n    |\n121 |             #[cfg(any(target_arch = \"wasm32\", no_std, not(feature = \"std\")))]\n    |                                               ^^^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[deny(unexpected_cfgs)]` implied by `#[deny(warnings)]`\n\nerror: unexpected `cfg` condition name: `no_std`\n   --> src/vm/runners/cairo_pie.rs:157:43\n    |\n157 |         #[cfg(any(target_arch = \"wasm32\", no_std, not(feature = \"std\")))]\n    |                                           ^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror: unexpected `cfg` condition name: `no_std`\n   --> src/vm/runners/cairo_pie.rs:159:43\n    |\n159 |         #[cfg(any(target_arch = \"wasm32\", no_std, not(feature = \"std\")))]\n    |                                           ^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror: unexpected `cfg` condition name: `no_std`\n   --> src/vm/runners/cairo_pie.rs:207:43\n    |\n207 |         #[cfg(any(target_arch = \"wasm32\", no_std, not(feature = \"std\")))]\n    |                                           ^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror: could not compile `cairo-vm` (lib) due to 5 previous errors\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/cairo-vm-0.9.2/src",
    "time_to_build": 12907,
    "time_to_solve": 1830
  }
]