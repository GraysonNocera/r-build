[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "warning: no edition set: defaulting to the 2015 edition while the latest is 2021\n   Compiling byteorder v1.5.0\n   Compiling parity-wasm-cp v0.1.6 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/parity-wasm-cp-0.1.6)\nerror: cannot find macro `println` in this scope\n   --> src/elements/module.rs:193:5\n    |\n193 |                 println!(\"data section exists\");\n    |                 ^^^^^^^\n\nerror: cannot find macro `println` in this scope\n   --> src/elements/module.rs:194:5\n    |\n194 |                 println!(\"section is:{:?}\", section);\n    |                 ^^^^^^^\n\nerror: cannot find macro `println` in this scope\n   --> src/elements/module.rs:198:3\n    |\n198 |         println!(\"data section does not exist\");\n    |         ^^^^^^^\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --> src/lib.rs:4:35\n  |\n4 | #![cfg_attr(not(feature = \"std\"), feature(alloc))]\n  |                                   ^^^^^^^^^^^^^^\n\nwarning: unused imports: `Instructions` and `serialize`\n --> src/elements/module.rs:6:85\n  |\n6 | use super::{Deserialize, Serialize, Error, Uint32, External, InitExpr, DataSegment, serialize, Instruction, Instructions};\n  |                                                                                     ^^^^^^^^^               ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `InitExpr`\n  --> src/elements/section.rs:26:2\n   |\n26 |     InitExpr,\n   |     ^^^^^^^^\n\nwarning: unexpected `cfg` condition name: `slow_assertions`\n   --> src/elements/index_map.rs:128:8\n    |\n128 |     #[cfg(slow_assertions)]\n    |           ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `debug_assertions`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slow_assertions)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slow_assertions)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `slow_assertions`\n  --> src/elements/index_map.rs:91:9\n   |\n91 |         #[cfg(slow_assertions)]\n   |               ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `debug_assertions`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slow_assertions)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slow_assertions)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `slow_assertions`\n   --> src/elements/index_map.rs:105:9\n    |\n105 |         #[cfg(slow_assertions)]\n    |               ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `debug_assertions`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slow_assertions)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slow_assertions)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `slow_assertions`\n   --> src/elements/index_map.rs:112:9\n    |\n112 |         #[cfg(slow_assertions)]\n    |               ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `debug_assertions`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slow_assertions)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slow_assertions)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `alloc` has been stable since 1.36.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:43\n  |\n4 | #![cfg_attr(not(feature = \"std\"), feature(alloc))]\n  |                                           ^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nerror: this arithmetic operation will overflow\n  --> src/elements/index_map.rs:89:40\n   |\n89 |             debug_assert!(self.entries.len() <= (::std::u32::MAX as usize) + 1);\n   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `usize::MAX + 1_usize`, which would overflow\n   |\n   = note: `#[deny(arithmetic_overflow)]` on by default\n\nFor more information about this error, try `rustc --explain E0554`.\nwarning: `parity-wasm-cp` (lib) generated 7 warnings\nerror: could not compile `parity-wasm-cp` (lib) due to 5 previous errors; 7 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/parity-wasm-cp-0.1.6/src",
    "time_to_build": 667,
    "time_to_solve": 322
  }
]