[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling fibril_core v0.0.7 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/fibril_core-0.0.7)\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/lib.rs:19:5\n   |\n19 | use std::time::Duration;\n   |     ^^^ use of undeclared crate or module `std`\n\nerror[E0405]: cannot find trait `Index` in this scope\n  --> src/id.rs:86:9\n   |\n86 | impl<T> Index<Id> for [T] {\n   |         ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::ops::Index;\n   |\n\nerror[E0405]: cannot find trait `IndexMut` in this scope\n  --> src/id.rs:93:9\n   |\n93 | impl<T> IndexMut<Id> for [T] {\n   |         ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::ops::IndexMut;\n   |\n\nerror[E0405]: cannot find trait `Index` in this scope\n  --> src/id.rs:99:9\n   |\n99 | impl<T> Index<Id> for Vec<T> {\n   |         ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1  + use core::ops::Index;\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/id.rs:99:23\n   |\n99 | impl<T> Index<Id> for Vec<T> {\n   |                       ^^^ not found in this scope\n\nerror[E0405]: cannot find trait `IndexMut` in this scope\n   --> src/id.rs:106:9\n    |\n106 | impl<T> IndexMut<Id> for Vec<T> {\n    |         ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n1   + use core::ops::IndexMut;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/id.rs:106:26\n    |\n106 | impl<T> IndexMut<Id> for Vec<T> {\n    |                          ^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:28:12\n   |\n28 |     Expect(String),\n   |            ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:30:11\n   |\n30 |     Panic(String),\n   |           ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:59:24\n   |\n59 | pub struct Expectation(String);\n   |                        ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:59:24\n   |\n59 | pub struct Expectation(String);\n   |                        ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n59 | pub struct Expectation<String>(String);\n   |                       ++++++++\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:61:29\n   |\n61 |     pub fn new(description: String) -> Self {\n   |                             ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:65:35\n   |\n65 |     pub fn description(&self) -> &String {\n   |                                   ^^^^^^ not found in this scope\n\nwarning: unexpected `cfg` condition name: `CHANNEL_NIGHTLY`\n  --> src/lib.rs:11:22\n   |\n11 | #![cfg_attr(all(doc, CHANNEL_NIGHTLY), feature(doc_auto_cfg))]\n   |                      ^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(CHANNEL_NIGHTLY)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(CHANNEL_NIGHTLY)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nerror[E0223]: ambiguous associated type\n  --> src/id.rs:88:33\n   |\n88 |     fn index(&self, id: Id) -> &Self::Output {\n   |                                 ^^^^^^^^^^^^\n   |\nhelp: use fully-qualified syntax\n   |\n88 |     fn index(&self, id: Id) -> &<[T] as BitOr>::Output {\n   |                                 ~~~~~~~~~~~~~~~~~~~~~~\n88 |     fn index(&self, id: Id) -> &<[T] as Index>::Output {\n   |                                 ~~~~~~~~~~~~~~~~~~~~~~\n88 |     fn index(&self, id: Id) -> &<[T] as IntoFuture>::Output {\n   |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n  --> src/id.rs:94:45\n   |\n94 |     fn index_mut(&mut self, id: Id) -> &mut Self::Output {\n   |                                             ^^^^^^^^^^^^\n   |\nhelp: use fully-qualified syntax\n   |\n94 |     fn index_mut(&mut self, id: Id) -> &mut <[T] as BitOr>::Output {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~\n94 |     fn index_mut(&mut self, id: Id) -> &mut <[T] as Index>::Output {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~\n94 |     fn index_mut(&mut self, id: Id) -> &mut <[T] as IntoFuture>::Output {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSome errors have detailed explanations: E0223, E0405, E0412, E0433.\nFor more information about an error, try `rustc --explain E0223`.\nwarning: `fibril_core` (lib) generated 1 warning\nerror: could not compile `fibril_core` (lib) due to 15 previous errors; 1 warning emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/fibril_core-0.0.7/src",
    "time_to_build": 453,
    "time_to_solve": 14
  }
]