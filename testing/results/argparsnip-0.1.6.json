[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling argparsnip v0.1.6 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/argparsnip-0.1.6)\nerror[E0433]: failed to resolve: could not find `hash_map` in `collections`\n  --> src/lib.rs:17:9\n   |\n17 |         hash_map::Entry::{Occupied, Vacant},\n   |         ^^^^^^^^ could not find `hash_map` in `collections`\n\nerror[E0432]: unresolved import `std::process`\n  --> src/lib.rs:20:5\n   |\n20 |     process::exit,\n   |     ^^^^^^^ could not find `process` in `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n --> src/value.rs:3:5\n  |\n3 | use std::{convert::TryInto, fmt::Debug};\n  |     ^^^ use of undeclared crate or module `std`\n\nerror[E0432]: unresolved import `hashbrown`\n  --> src/std.rs:15:13\n   |\n15 |     pub use hashbrown::HashMap;\n   |             ^^^^^^^^^ use of undeclared crate or module `hashbrown`\n\nerror: cannot find macro `format` in this scope\n   --> src/lib.rs:595:24\n    |\n595 |         let mut help = format!(\n    |                        ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n12  + use alloc::format;\n    |\n\nerror: cannot find macro `print` in this scope\n   --> src/lib.rs:567:17\n    |\n567 |                 print!(\"{}\", command.generate_help());\n    |                 ^^^^^\n\nerror: cannot find macro `println` in this scope\n   --> src/lib.rs:570:17\n    |\n570 |                 println!(\"{} {}\", self.path.unwrap_or(self.name), command.version);\n    |                 ^^^^^^^\n\nerror: cannot find macro `print` in this scope\n   --> src/lib.rs:694:17\n    |\n694 |                 print!(\"{}\", self.generate_help());\n    |                 ^^^^^\n\nerror: cannot find macro `println` in this scope\n   --> src/lib.rs:698:17\n    |\n698 |                 println!(\"{} {}\", self.path.unwrap_or(self.name), self.version);\n    |                 ^^^^^^^\n\nerror[E0412]: cannot find type `Box` in this scope\n  --> src/value.rs:19:11\n   |\n19 |     Array(Box<Type>),\n   |           ^^^ not found in this scope\n   |\nhelp: consider importing one of these structs\n   |\n1  + use crate::std::boxed::Box;\n   |\n1  + use alloc::boxed::Box;\n   |\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/value.rs:38:12\n   |\n38 |     String(String),\n   |            ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these structs\n   |\n1  + use crate::String;\n   |\n1  + use alloc::string::String;\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n  --> src/value.rs:39:11\n   |\n39 |     Array(Vec<Value>),\n   |           ^^^ not found in this scope\n   |\nhelp: consider importing one of these structs\n   |\n1  + use crate::Vec;\n   |\n1  + use alloc::vec::Vec;\n   |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/value.rs:43:27\n   |\n43 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n   |                           ^^^ use of undeclared crate or module `std`\n   |\nhelp: consider importing one of these modules\n   |\n1  + use core::fmt;\n   |\n1  + use alloc::fmt;\n   |\nhelp: if you import `fmt`, refer to it directly\n   |\n43 -     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n43 +     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> std::fmt::Result {\n   |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n  --> src/value.rs:43:55\n   |\n43 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n   |                                                       ^^^ use of undeclared crate or module `std`\n   |\nhelp: consider importing one of these modules\n   |\n1  + use core::fmt;\n   |\n1  + use alloc::fmt;\n   |\nhelp: if you import `fmt`, refer to it directly\n   |\n43 -     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n43 +     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n   |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:128:13\n    |\n128 | converters!(Vec<Value>, Array);\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:87:22\n    |\n87  |         impl TryInto<Vec<$x>> for Value {\n    |                      ^^^ not found in this scope\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:90:41\n    |\n90  |             fn try_into(self) -> Result<Vec<$x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:93:39\n    |\n93  |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:104:26\n    |\n104 |         impl<'a> TryInto<Vec<&'a $x>> for &'a Value {\n    |                          ^^^ not found in this scope\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:107:41\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                         ^^^ not found in this scope\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:110:39\n    |\n110 |                         let mut vec = Vec::with_capacity(arr.len());\n    |                                       ^^^ use of undeclared type `Vec`\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:130:11\n    |\n130 | impl From<String> for Value {\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:131:18\n    |\n131 |     fn from(val: String) -> Self {\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:136:15\n    |\n136 | impl<'a> Into<String> for &'a Value {\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:137:22\n    |\n137 |     fn into(self) -> String {\n    |                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:146:52\n    |\n146 |             Value::Array(v) => v.iter().map(|v| -> String { v.into() }).collect::<String>(),\n    |                                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:146:83\n    |\n146 |             Value::Array(v) => v.iter().map(|v| -> String { v.into() }).collect::<String>(),\n    |                                                                                   ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:151:11\n    |\n151 | impl Into<String> for Value {\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/value.rs:152:22\n    |\n152 |     fn into(self) -> String {\n    |                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:168:18\n    |\n168 | impl<'a> TryInto<Vec<&'a str>> for &'a Value {\n    |                  ^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/value.rs:171:33\n    |\n171 |     fn try_into(self) -> Result<Vec<&'a str>, Self::Error> {\n    |                                 ^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `Vec`\n   --> src/value.rs:174:31\n    |\n174 |                 let mut vec = Vec::with_capacity(arr.len());\n    |                               ^^^ use of undeclared type `Vec`\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::Vec;\n    |\n1   + use alloc::vec::Vec;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:187:23\n    |\n187 |         Value::String(String::from(val))\n    |                       ^^^^^^ use of undeclared type `String`\n    |\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:193:73\n    |\n193 |         Value::from($val.parse::<$x>().map_err(|_| Error::WrongCastType(String::from($val)))?)\n    |                                                                         ^^^^^^ use of undeclared type `String`\n...\n213 |         Type::Bool => cast!(val, bool),\n    |                       ---------------- in this macro invocation\n    |\n    = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:193:73\n    |\n193 |         Value::from($val.parse::<$x>().map_err(|_| Error::WrongCastType(String::from($val)))?)\n    |                                                                         ^^^^^^ use of undeclared type `String`\n...\n214 |         Type::Int => cast!(val, i32),\n    |                      --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:193:73\n    |\n193 |         Value::from($val.parse::<$x>().map_err(|_| Error::WrongCastType(String::from($val)))?)\n    |                                                                         ^^^^^^ use of undeclared type `String`\n...\n215 |         Type::Long => cast!(val, i64),\n    |                       --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:193:73\n    |\n193 |         Value::from($val.parse::<$x>().map_err(|_| Error::WrongCastType(String::from($val)))?)\n    |                                                                         ^^^^^^ use of undeclared type `String`\n...\n216 |         Type::Float => cast!(val, f32),\n    |                        --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> src/value.rs:193:73\n    |\n193 |         Value::from($val.parse::<$x>().map_err(|_| Error::WrongCastType(String::from($val)))?)\n    |                                                                         ^^^^^^ use of undeclared type `String`\n...\n217 |         Type::Double => cast!(val, f64),\n    |                         --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing one of these structs\n    |\n1   + use crate::String;\n    |\n1   + use alloc::string::String;\n    |\n\nwarning: unused import: `alloc::boxed::Box`\n --> src/std.rs:6:13\n  |\n6 |     pub use alloc::boxed::Box;\n  |             ^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `core::convert::From`\n  --> src/std.rs:10:13\n   |\n10 |     pub use core::convert::From;\n   |             ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused import: `core::convert::TryInto`\n  --> src/std.rs:11:13\n   |\n11 |     pub use core::convert::TryInto;\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused import: `alloc::fmt::Debug`\n  --> src/std.rs:27:13\n   |\n27 |     pub use alloc::fmt::Debug;\n   |             ^^^^^^^^^^^^^^^^^\n\nwarning: crate-level attribute should be in the root module\n --> src/std.rs:1:1\n  |\n1 | #![no_std]\n  | ^^^^^^^^^^\n  |\n  = note: `#[warn(unused_attributes)]` on by default\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n123 | converters!(bool, Bool);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n124 | converters!(i32, Int);\n    | --------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n125 | converters!(i64, Long);\n    | ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n126 | converters!(f32, Float);\n    | ----------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n127 | converters!(f64, Double);\n    | ------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:79:49\n    |\n79  |             fn try_into(self) -> Result<&'a $x, Self::Error> {\n    |                                                 ^^^^^^^^^^^\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n79  |             fn try_into(self) -> Result<&'a $x, <&'a Value as Example>::Error> {\n    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:107:54\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, Self::Error> {\n    |                                                      ^^^^^^^^^^^\n...\n128 | converters!(Vec<Value>, Array);\n    | ------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `converters` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: if there were a trait named `Example` with associated type `Error` implemented for `&'a Value`, you could use the fully-qualified path\n    |\n107 |             fn try_into(self) -> Result<Vec<&'a $x>, <&'a Value as Example>::Error> {\n    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:160:42\n    |\n160 |     fn try_into(self) -> Result<&'a str, Self::Error> {\n    |                                          ^^^^^^^^^^^\n    |\nhelp: use fully-qualified syntax\n    |\n160 |     fn try_into(self) -> Result<&'a str, <&'a Value as TryFrom>::Error> {\n    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n160 |     fn try_into(self) -> Result<&'a str, <&'a Value as TryInto>::Error> {\n    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/value.rs:171:47\n    |\n171 |     fn try_into(self) -> Result<Vec<&'a str>, Self::Error> {\n    |                                               ^^^^^^^^^^^\n    |\nhelp: use fully-qualified syntax\n    |\n171 |     fn try_into(self) -> Result<Vec<&'a str>, <&'a Value as TryFrom>::Error> {\n    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n171 |     fn try_into(self) -> Result<Vec<&'a str>, <&'a Value as TryInto>::Error> {\n    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSome errors have detailed explanations: E0223, E0412, E0432, E0433.\nFor more information about an error, try `rustc --explain E0223`.\nwarning: `argparsnip` (lib) generated 5 warnings\nerror: could not compile `argparsnip` (lib) due to 82 previous errors; 5 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/argparsnip-0.1.6/src",
    "time_to_build": 493,
    "time_to_solve": 80
  }
]