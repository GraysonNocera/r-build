[
  {
    "built_with_features": "default",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi"
      ],
      "code": 0,
      "stderr": "warning: unexpected `cfg` condition name: `btree_vec_debug`\n  --> src/lib.rs:20:27\n   |\n20 | #![cfg_attr(not(all(test, btree_vec_debug)), no_std)]\n   |                           ^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(btree_vec_debug)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(btree_vec_debug)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `has_allocator_api`\n  --> src/lib.rs:22:36\n   |\n22 |     any(feature = \"allocator_api\", has_allocator_api),\n   |                                    ^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_allocator_api)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_allocator_api)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `any_allocator_api`\n  --> src/lib.rs:95:11\n   |\n95 | #[cfg(not(any_allocator_api))]\n   |           ^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(any_allocator_api)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(any_allocator_api)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `btree_vec_debug`\n   --> src/lib.rs:107:7\n    |\n107 | #[cfg(btree_vec_debug)]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(btree_vec_debug)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(btree_vec_debug)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: field `0` is never read\n  --> src/node/parent_ptr.rs:39:23\n   |\n39 |         struct Align2(u16);\n   |                ------ ^^^\n   |                |\n   |                field in this struct\n   |\n   = help: consider removing this field\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: `btree-vec` (lib) generated 5 warnings\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n",
      "stdout": ""
    },
    "features": [],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/btree-vec-0.3.1/src",
    "time_to_build": 43,
    "time_to_solve": 100
  }
]