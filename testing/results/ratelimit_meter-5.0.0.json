[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling nonzero_ext v0.1.5\n   Compiling ratelimit_meter v5.0.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/ratelimit_meter-5.0.0)\nerror[E0432]: unresolved import `self::no_std`\n   --> src/lib.rs:286:19\n    |\n286 |     pub use self::no_std::*;\n    |                   ^^^^^^ could not find `no_std` in `self`\n\nerror[E0432]: unresolved import `spin`\n --> src/thread_safety.rs:7:5\n  |\n7 | use spin::Mutex;\n  |     ^^^^ use of undeclared crate or module `spin`\n\nwarning: unexpected `cfg` condition value: `cargo-clippy`\n   --> src/lib.rs:218:13\n    |\n218 | #![cfg_attr(feature = \"cargo-clippy\", deny(warnings))]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default`, `evmap`, `no_std`, `parking_lot`, `spin`, and `std`\n    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: ambiguous glob re-exports\n --> src/algorithms.rs:6:9\n  |\n6 | pub use self::gcra::*;\n  |         ^^^^^^^^^^^^^ the name `State` in the type namespace is first re-exported here\n7 | pub use self::leaky_bucket::*;\n  |         --------------------- but the name `State` in the type namespace is also re-exported here\n  |\n  = note: `#[warn(ambiguous_glob_reexports)]` on by default\n\nerror[E0392]: type parameter `P` is never used\n  --> src/algorithms/gcra.rs:35:18\n   |\n35 | pub struct State<P: clock::Reference>(ThreadsafeWrapper<Tat<P>>);\n   |                  ^ unused type parameter                    - `P` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `P`, referring to it in a field, or using a marker such as `core::marker::PhantomData`\n\nerror[E0392]: type parameter `P` is never used\n  --> src/algorithms/leaky_bucket.rs:53:18\n   |\n53 | pub struct State<P: clock::Reference>(ThreadsafeWrapper<BucketState<P>>);\n   |                  ^ unused type parameter                            - `P` is named here, but is likely unused in the containing type\n   |\n   = help: consider removing `P`, referring to it in a field, or using a marker such as `core::marker::PhantomData`\n\nerror[E0282]: type annotations needed\n  --> src/algorithms/gcra.rs:45:13\n   |\n45 |         let data = self.0.snapshot();\n   |             ^^^^\n46 |         Some(data.0? + params.tau)\n   |              ---- type must be known at this point\n   |\nhelp: consider giving `data` an explicit type\n   |\n45 |         let data: /* Type */ = self.0.snapshot();\n   |                 ++++++++++++\n\nerror[E0282]: type annotations needed for `&_`\n   --> src/algorithms/gcra.rs:168:38\n    |\n168 |         state.0.measure_and_replace(|tat| {\n    |                                      ^^^\n169 |             // the \"theoretical arrival time\" of the next cell:\n170 |             let tat = tat.0.unwrap_or(t0);\n    |                       ----- type must be known at this point\n    |\nhelp: consider giving this closure parameter an explicit type, where the type for type parameter `T` is specified\n    |\n168 |         state.0.measure_and_replace(|tat: &T| {\n    |                                         ++++\n\nerror[E0609]: no field `0` on type `&_`\n   --> src/algorithms/gcra.rs:170:27\n    |\n170 |             let tat = tat.0.unwrap_or(t0);\n    |                           ^ unknown field\n\nerror[E0282]: type annotations needed for `&_`\n   --> src/algorithms/gcra.rs:193:38\n    |\n193 |         state.0.measure_and_replace(|tat| {\n    |                                      ^^^\n194 |             let tat = tat.0.unwrap_or(t0);\n    |                       ----- type must be known at this point\n    |\nhelp: consider giving this closure parameter an explicit type, where the type for type parameter `T` is specified\n    |\n193 |         state.0.measure_and_replace(|tat: &T| {\n    |                                         ++++\n\nerror[E0609]: no field `0` on type `&_`\n   --> src/algorithms/gcra.rs:194:27\n    |\n194 |             let tat = tat.0.unwrap_or(t0);\n    |                           ^ unknown field\n\nerror[E0282]: type annotations needed\n  --> src/algorithms/leaky_bucket.rs:63:13\n   |\n63 |         let data = self.0.snapshot();\n   |             ^^^^\n64 |         Some(data.last_update? + data.level)\n   |              ---- type must be known at this point\n   |\nhelp: consider giving `data` an explicit type\n   |\n63 |         let data: /* Type */ = self.0.snapshot();\n   |                 ++++++++++++\n\nerror[E0282]: type annotations needed for `&_`\n   --> src/algorithms/leaky_bucket.rs:147:38\n    |\n147 |         state.0.measure_and_replace(|state| {\n    |                                      ^^^^^\n...\n152 |             let last = state.last_update.unwrap_or(t0);\n    |                        ----------------- type must be known at this point\n    |\nhelp: consider giving this closure parameter an explicit type, where the type for type parameter `T` is specified\n    |\n147 |         state.0.measure_and_replace(|state: &T| {\n    |                                           ++++\n\nerror[E0609]: no field `last_update` on type `&_`\n   --> src/algorithms/leaky_bucket.rs:152:30\n    |\n152 |             let last = state.last_update.unwrap_or(t0);\n    |                              ^^^^^^^^^^^ unknown field\n\nSome errors have detailed explanations: E0282, E0392, E0432, E0609.\nFor more information about an error, try `rustc --explain E0282`.\nwarning: `ratelimit_meter` (lib) generated 2 warnings\nerror: could not compile `ratelimit_meter` (lib) due to 12 previous errors; 2 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/ratelimit_meter-5.0.0/src",
    "time_to_build": 339,
    "time_to_solve": 85
  }
]