[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling serde v1.0.215\n   Compiling open-rpc v0.1.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/open-rpc-0.1.0)\nerror[E0433]: failed to resolve: could not find `Content` in `de`\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^ could not find `Content` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:5\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |     ^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `ContentRefDeserializer` in `de`\n   --> src/lib.rs:405:21\n    |\n405 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `ContentRefDeserializer` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:35\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `TaggedContentVisitor` in `de`\n   --> src/lib.rs:450:21\n    |\n450 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `TaggedContentVisitor` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:16:50\n    |\n16  |     TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor, UntaggedUnitVisitor,\n    |                                                  ^^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `ContentDeserializer` in `de`\n   --> src/lib.rs:450:21\n    |\n450 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `ContentDeserializer` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:14\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |              ^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `InternallyTaggedUnitVisitor` in `de`\n   --> src/lib.rs:450:21\n    |\n450 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `InternallyTaggedUnitVisitor` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:15:5\n    |\n15  |     InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `ContentRefDeserializer` in `de`\n   --> src/lib.rs:700:21\n    |\n700 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `ContentRefDeserializer` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:35\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `ContentRefDeserializer` in `de`\n   --> src/lib.rs:816:21\n    |\n816 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ could not find `ContentRefDeserializer` in `de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:35\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `String` in this scope\n  --> src/lib.rs:25:18\n   |\n25 |     pub openrpc: String,\n   |                  ^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n10 + use alloc::string::String;\n   |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:141:16\n    |\n141 |     pub title: String,\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:146:29\n    |\n146 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:151:34\n    |\n151 |     pub terms_of_service: Option<String>,\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:163:18\n    |\n163 |     pub version: String,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:175:22\n    |\n175 |     pub name: Option<String>,\n    |                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:183:21\n    |\n183 |     pub url: Option<String>,\n    |                     ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:191:23\n    |\n191 |     pub email: Option<String>,\n    |                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:200:15\n    |\n200 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:205:21\n    |\n205 |     pub url: Option<String>,\n    |                     ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:214:15\n    |\n214 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:225:25\n    |\n225 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:230:29\n    |\n230 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:234:29\n    |\n234 |     pub variables: BTreeMap<String, ServerVariable>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:244:20\n    |\n244 |     pub enum_: Vec<String>,\n    |                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:251:18\n    |\n251 |     pub default: String,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:256:29\n    |\n256 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:270:15\n    |\n270 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:277:25\n    |\n277 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:282:29\n    |\n282 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:365:15\n    |\n365 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:368:25\n    |\n368 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:373:29\n    |\n373 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:395:23\n    |\n395 |     pub title: Option<String>,\n    |                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:398:29\n    |\n398 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `FlatMapSerializer` in module `_serde::__private::ser`\n   --> src/lib.rs:390:10\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |          ^^^^^^^^^ not found in `_serde::__private::ser`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/ser.rs:988:12\n    |\n988 | pub struct FlatMapSerializer<'a, M: 'a>(pub &'a mut M);\n    |            ^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/ser.rs:987:1\n    |\n987 | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Content` in module `_serde::__private::de`\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^ not found in `_serde::__private::de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:5\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |     ^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0433]: failed to resolve: could not find `ToString` in `__private`\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^ could not find `ToString` in `__private`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/mod.rs:21:22\n    |\n21  | pub use crate::lib::{ToString, Vec};\n    |                      ^^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/mod.rs:20:1\n    |\n20  | #[cfg(any(feature = \"alloc\", feature = \"std\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n10  + use alloc::string::ToString;\n    |\n\nerror[E0433]: failed to resolve: could not find `Vec` in `__private`\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^ could not find `Vec` in `__private`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/mod.rs:21:32\n    |\n21  | pub use crate::lib::{ToString, Vec};\n    |                                ^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/mod.rs:20:1\n    |\n20  | #[cfg(any(feature = \"alloc\", feature = \"std\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this struct through its public re-export\n    |\n10  + use Vec;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `FlatMapDeserializer` in module `_serde::__private::de`\n    --> src/lib.rs:390:21\n     |\n390  | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n     |                     ^^^^^^^^^^^ not found in `_serde::__private::de`\n     |\nnote: found an item that was configured out\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:2492:12\n     |\n2492 | pub struct FlatMapDeserializer<'a, 'de: 'a, E>(\n     |            ^^^^^^^^^^^^^^^^^^^\nnote: the item is gated here\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:2491:1\n     |\n2491 | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:412:20\n    |\n412 |         reference: String,\n    |                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `Content` in module `_serde::__private::de`\n   --> src/lib.rs:405:21\n    |\n405 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ not found in `_serde::__private::de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:5\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |     ^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Box` in this scope\n   --> src/lib.rs:526:23\n    |\n526 |     pub items: Option<Box<Schema>>,\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::boxed::Box;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:541:25\n    |\n541 |     pub pattern: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:547:33\n    |\n547 |     pub enumeration: Option<Vec<String>>,\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:601:30\n    |\n601 |     pub properties: BTreeMap<String, Schema>,\n    |                              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:604:23\n    |\n604 |     pub required: Vec<String>,\n    |                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:615:15\n    |\n615 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:618:29\n    |\n618 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:621:25\n    |\n621 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:638:22\n    |\n638 |     pub name: Option<String>,\n    |                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:643:29\n    |\n643 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:646:25\n    |\n646 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:662:14\n    |\n662 |     External(String),\n    |              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:676:15\n    |\n676 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:681:29\n    |\n681 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:684:25\n    |\n684 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:688:24\n    |\n688 |     pub method: Option<String>,\n    |                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `Content` in module `_serde::__private::de`\n   --> src/lib.rs:700:21\n    |\n700 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ not found in `_serde::__private::de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:5\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |     ^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:719:34\n    |\n719 | pub struct RuntimeExpression(pub String);\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:732:18\n    |\n732 |     pub message: String,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:751:39\n    |\n751 |     pub content_descriptors: BTreeMap<String, ContentDescriptor>,\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:754:27\n    |\n754 |     pub schemas: BTreeMap<String, Schema>,\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:757:28\n    |\n757 |     pub examples: BTreeMap<String, ExampleObject>,\n    |                            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:760:25\n    |\n760 |     pub links: BTreeMap<String, Link>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:763:26\n    |\n763 |     pub errors: BTreeMap<String, Error>,\n    |                          ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:770:36\n    |\n770 |     pub example_pairings: BTreeMap<String, ExamplePairing>,\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:773:24\n    |\n773 |     pub tags: BTreeMap<String, Tag>,\n    |                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:785:15\n    |\n785 |     pub name: String,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:788:25\n    |\n788 |     pub summary: Option<String>,\n    |                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:793:29\n    |\n793 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:807:29\n    |\n807 |     pub description: Option<String>,\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:812:14\n    |\n812 |     pub url: String,\n    |              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `String` in this scope\n   --> src/lib.rs:823:20\n    |\n823 |         reference: String,\n    |                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n10  + use alloc::string::String;\n    |\n\nerror[E0412]: cannot find type `Content` in module `_serde::__private::de`\n   --> src/lib.rs:816:21\n    |\n816 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ not found in `_serde::__private::de`\n    |\nnote: found an item that was configured out\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:14:5\n    |\n14  |     Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    |     ^^^^^^^\nnote: the item is gated here\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:12:1\n    |\n12  | #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> src/lib.rs:843:25\n    |\n843 |     pub fn servers() -> Vec<Server> {\n    |                         ^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n838 +     use crate::Vec;\n    |\n838 +     use alloc::vec::Vec;\n    |\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> src/lib.rs:172:9\n    |\n172 |         feature = \"serde\",\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default`, `relaxed`, `serde_json`, and `std`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> src/lib.rs:180:9\n    |\n180 |         feature = \"serde\",\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default`, `relaxed`, `serde_json`, and `std`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> src/lib.rs:188:9\n    |\n188 |         feature = \"serde\",\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `default`, `relaxed`, `serde_json`, and `std`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `Info`\n   --> src/lib.rs:840:17\n    |\n840 |     use crate::{Info, RuntimeExpression, Server};\n    |                 ^^^^\n    |\n    = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: the trait bound `Vec<Server>: Serialize` is not satisfied\n    --> src/lib.rs:16:10\n     |\n16   | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<Server>`\n...\n31   |     /// An array of [`Server`] objects, which provide connectivity information to a target server.\n     |     ---------------------------------------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<Method>>: Serialize` is not satisfied\n    --> src/lib.rs:16:10\n     |\n16   | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<Method>>`\n...\n38   |     /// The available methods for the API. While this field is required, it is legal to leave it\n     |     -------------------------------------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<Method>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<Server>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:37:18\n     |\n37   |     pub servers: Vec<Server>,\n     |                  ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Server>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<Method>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:40:18\n     |\n40   |     pub methods: Vec<RefOr<Method>>,\n     |                  ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Method>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Method>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<Server>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:37:18\n     |\n37   |     pub servers: Vec<Server>,\n     |                  ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Server>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<Method>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:40:18\n     |\n40   |     pub methods: Vec<RefOr<Method>>,\n     |                  ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Method>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Method>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<Method>>: Deserialize<'_>` is not satisfied\n  --> src/lib.rs:16:21\n   |\n16 | #[derive(Serialize, Deserialize, Debug, Clone)]\n   |                     ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Method>>`\n   |\n   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Method>>` type\n   = note: for types from other crates check whether the crate offers a `serde` feature flag\n   = help: the following other types implement trait `Deserialize<'de>`:\n             &'a [u8]\n             &'a str\n             ()\n             (T,)\n             (T0, T1)\n             (T0, T1, T2)\n             (T0, T1, T2, T3)\n             (T0, T1, T2, T3, T4)\n           and 163 others\nnote: required by a bound in `_::_serde::__private::de::missing_field`\n  --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:25:8\n   |\n23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n   |        ------------- required by a bound in this function\n24 | where\n25 |     V: Deserialize<'de>,\n   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`\n   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<Tag>>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<Tag>>`\n...\n271  |     /// A list of tags for API documentation control. Tags can be used for logical grouping\n     |     --------------------------------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<Tag>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<ContentDescriptor>>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<ContentDescriptor>>`\n...\n286  |     /// A list of parameters that are applicable for this method.\n     |     ------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<ContentDescriptor>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<Server>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<Server>`, which is required by `core::option::Option<Vec<Server>>: Serialize`\n...\n308  |     /// An alternative `servers` array to service this method.\n     |     ---------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\n     = note: required for `core::option::Option<Vec<Server>>` to implement `Serialize`\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<Error>>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<Error>>`\n...\n313  |     /// A list of custom application-defined errors that may be returned.\n     |     --------------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<Error>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<Link>>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<Link>>`\n...\n318  |     /// A list of possible links from this method call.\n     |     --------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<Link>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<ExamplePairing>>: Serialize` is not satisfied\n    --> src/lib.rs:263:10\n     |\n263  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<ExamplePairing>>`\n...\n336  |     /// An array of [`ExamplePairing`] objects, where each example includes a valid\n     |     ------------------------------------------------------------------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<ExamplePairing>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<Tag>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:274:15\n     |\n274  |     pub tags: Vec<RefOr<Tag>>,\n     |               ^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Tag>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Tag>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<ContentDescriptor>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:293:17\n     |\n293  |     pub params: Vec<RefOr<ContentDescriptor>>,\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ContentDescriptor>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ContentDescriptor>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<Server>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:312:18\n     |\n312  |     pub servers: Option<Vec<Server>>,\n     |                  ^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Server>`, which is required by `core::option::Option<Vec<Server>>: Deserialize<'_>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\n     = note: required for `core::option::Option<Vec<Server>>` to implement `Deserialize<'_>`\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<Error>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:317:17\n     |\n317  |     pub errors: Vec<RefOr<Error>>,\n     |                 ^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Error>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Error>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<Link>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:320:16\n     |\n320  |     pub links: Vec<RefOr<Link>>,\n     |                ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Link>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Link>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<ExamplePairing>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:339:19\n     |\n339  |     pub examples: Vec<RefOr<ExamplePairing>>,\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ExamplePairing>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ExamplePairing>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<Tag>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:274:15\n     |\n274  |     pub tags: Vec<RefOr<Tag>>,\n     |               ^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Tag>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Tag>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<ContentDescriptor>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:293:17\n     |\n293  |     pub params: Vec<RefOr<ContentDescriptor>>,\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ContentDescriptor>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ContentDescriptor>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<Server>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:312:18\n     |\n312  |     pub servers: Option<Vec<Server>>,\n     |                  ^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Server>`, which is required by `core::option::Option<Vec<Server>>: Deserialize<'_>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Server>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\n     = note: required for `core::option::Option<Vec<Server>>` to implement `Deserialize<'_>`\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<Error>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:317:17\n     |\n317  |     pub errors: Vec<RefOr<Error>>,\n     |                 ^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Error>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Error>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<Link>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:320:16\n     |\n320  |     pub links: Vec<RefOr<Link>>,\n     |                ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<Link>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<Link>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<ExamplePairing>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:339:19\n     |\n339  |     pub examples: Vec<RefOr<ExamplePairing>>,\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ExamplePairing>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ExamplePairing>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<ContentDescriptor>>: Deserialize<'_>` is not satisfied\n   --> src/lib.rs:263:21\n    |\n263 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ContentDescriptor>>`\n    |\n    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ContentDescriptor>>` type\n    = note: for types from other crates check whether the crate offers a `serde` feature flag\n    = help: the following other types implement trait `Deserialize<'de>`:\n              &'a [u8]\n              &'a str\n              ()\n              (T,)\n              (T0, T1)\n              (T0, T1, T2)\n              (T0, T1, T2, T3)\n              (T0, T1, T2, T3, T4)\n            and 163 others\nnote: required by a bound in `_::_serde::__private::de::missing_field`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:25:8\n    |\n23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n    |        ------------- required by a bound in this function\n24  | where\n25  |     V: Deserialize<'de>,\n    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: this function depends on never type fallback being `()`\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #123748 <https://github.com/rust-lang/rust/issues/123748>\n    = help: specify the types explicitly\nnote: in edition 2024, the requirement `!: Deserialize<'_>` will fail\n   --> src/lib.rs:390:21\n    |\n390 | #[derive(Serialize, Deserialize, Debug, Clone, Default)]\n    |                     ^^^^^^^^^^^\n    = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default\n    = note: this warning originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<Schema>: Serialize` is not satisfied\n    --> src/lib.rs:422:9\n     |\n420  |         /// The schemas that the final object must match.\n     |         ------------------------------------------------- required by a bound introduced by this call\n421  |         #[serde(rename = \"allOf\")]\n422  |         all_of: Vec<Schema>,\n     |         ^^^^^^ the trait `Serialize` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n\nerror[E0277]: the trait bound `Vec<Schema>: Serialize` is not satisfied\n    --> src/lib.rs:430:9\n     |\n428  |         /// The schemas that the final object must match.\n     |         ------------------------------------------------- required by a bound introduced by this call\n429  |         #[serde(rename = \"anyOf\")]\n430  |         any_of: Vec<Schema>,\n     |         ^^^^^^ the trait `Serialize` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n\nerror[E0277]: the trait bound `Vec<Schema>: Serialize` is not satisfied\n    --> src/lib.rs:438:9\n     |\n436  |         /// The schemas that the final object must match.\n     |         ------------------------------------------------- required by a bound introduced by this call\n437  |         #[serde(rename = \"oneOf\")]\n438  |         one_of: Vec<Schema>,\n     |         ^^^^^^ the trait `Serialize` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n\nerror[E0277]: the trait bound `Vec<Schema>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:422:17\n     |\n422  |         all_of: Vec<Schema>,\n     |                 ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<Schema>: Deserialize<'_>` is not satisfied\n   --> src/lib.rs:405:21\n    |\n405 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Schema>`\n    |\n    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Schema>` type\n    = note: for types from other crates check whether the crate offers a `serde` feature flag\n    = help: the following other types implement trait `Deserialize<'de>`:\n              &'a [u8]\n              &'a str\n              ()\n              (T,)\n              (T0, T1)\n              (T0, T1, T2)\n              (T0, T1, T2, T3)\n              (T0, T1, T2, T3, T4)\n            and 163 others\nnote: required by a bound in `_::_serde::__private::de::missing_field`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:25:8\n    |\n23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n    |        ------------- required by a bound in this function\n24  | where\n25  |     V: Deserialize<'de>,\n    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<Schema>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:430:17\n     |\n430  |         any_of: Vec<Schema>,\n     |                 ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<Schema>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:438:17\n     |\n438  |         one_of: Vec<Schema>,\n     |                 ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<Schema>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<Schema>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<ExampleObject>>: Serialize` is not satisfied\n    --> src/lib.rs:610:10\n     |\n610  | #[derive(Serialize, Deserialize, Debug, Clone)]\n     |          ^^^^^^^^^ the trait `Serialize` is not implemented for `Vec<RefOr<ExampleObject>>`\n...\n622  |     /// Example parameters.\n     |     ----------------------- required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Vec<RefOr<ExampleObject>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 126 others\nnote: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/ser/mod.rs:1867:21\n     |\n1865 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\n     |        --------------- required by a bound in this associated function\n1866 |     where\n1867 |         T: ?Sized + Serialize;\n     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`\n     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound `Vec<RefOr<ExampleObject>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:624:17\n     |\n624  |     pub params: Vec<RefOr<ExampleObject>>,\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ExampleObject>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ExampleObject>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_element`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1732:12\n     |\n1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n     |        ------------ required by a bound in this associated function\n1731 |     where\n1732 |         T: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`\n\nerror[E0277]: the trait bound `Vec<RefOr<ExampleObject>>: Deserialize<'_>` is not satisfied\n    --> src/lib.rs:624:17\n     |\n624  |     pub params: Vec<RefOr<ExampleObject>>,\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ExampleObject>>`\n     |\n     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ExampleObject>>` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Deserialize<'de>`:\n               &'a [u8]\n               &'a str\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 163 others\nnote: required by a bound in `next_value`\n    --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/de/mod.rs:1871:12\n     |\n1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>\n     |        ---------- required by a bound in this associated function\n1870 |     where\n1871 |         V: Deserialize<'de>,\n     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`\n\nerror[E0277]: the trait bound `Vec<RefOr<ExampleObject>>: Deserialize<'_>` is not satisfied\n   --> src/lib.rs:610:21\n    |\n610 | #[derive(Serialize, Deserialize, Debug, Clone)]\n    |                     ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Vec<RefOr<ExampleObject>>`\n    |\n    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `Vec<RefOr<ExampleObject>>` type\n    = note: for types from other crates check whether the crate offers a `serde` feature flag\n    = help: the following other types implement trait `Deserialize<'de>`:\n              &'a [u8]\n              &'a str\n              ()\n              (T,)\n              (T0, T1)\n              (T0, T1, T2)\n              (T0, T1, T2, T3)\n              (T0, T1, T2, T3, T4)\n            and 163 others\nnote: required by a bound in `_::_serde::__private::de::missing_field`\n   --> /Users/graysonnocera/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.215/src/private/de.rs:25:8\n    |\n23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n    |        ------------- required by a bound in this function\n24  | where\n25  |     V: Deserialize<'de>,\n    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`\n    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0277, E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0277`.\nwarning: `open-rpc` (lib) generated 5 warnings\nerror: could not compile `open-rpc` (lib) due to 112 previous errors; 5 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/open-rpc-0.1.0/src",
    "time_to_build": 3122,
    "time_to_solve": 29
  }
]