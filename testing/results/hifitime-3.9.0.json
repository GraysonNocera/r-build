[
  {
    "built_with_features": "none",
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 0,
      "stderr": "   Compiling hifitime v3.9.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/hifitime-3.9.0)\nwarning: dropping unsupported crate type `cdylib` for target `thumbv7m-none-eabi`\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:2870:11\n     |\n2870 | #[cfg(not(kani))]\n     |           ^^^^\n     |\n     = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n     = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3224:7\n     |\n3224 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3246:7\n     |\n3246 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3300:7\n     |\n3300 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3322:7\n     |\n3322 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3349:7\n     |\n3349 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/epoch.rs:3376:7\n     |\n3376 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `Euclid`\n  --> src/epoch.rs:49:18\n   |\n49 | use num_traits::{Euclid, Float};\n   |                  ^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unexpected `cfg` condition name: `kani`\n   --> src/epoch.rs:961:15\n    |\n961 |     #[cfg(not(kani))]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n  --> src/duration.rs:39:7\n   |\n39 | #[cfg(kani)]\n   |       ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n  --> src/duration.rs:72:7\n   |\n72 | #[cfg(kani)]\n   |       ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/duration.rs:1278:11\n     |\n1278 | #[cfg(not(kani))]\n     |           ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/duration.rs:1529:7\n     |\n1529 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/duration.rs:1537:7\n     |\n1537 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n    --> src/duration.rs:1575:7\n     |\n1575 | #[cfg(kani)]\n     |       ^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n  --> src/timescale.rs:17:7\n   |\n17 | #[cfg(kani)]\n   |       ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n  --> src/timescale.rs:89:7\n   |\n89 | #[cfg(kani)]\n   |       ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `kani`\n   --> src/timescale.rs:261:7\n    |\n261 | #[cfg(kani)]\n    |       ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(kani)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(kani)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: `hifitime` (lib) generated 19 warnings (run `cargo fix --lib -p hifitime` to apply 1 suggestion)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.45s\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/hifitime-3.9.0/src",
    "time_to_build": 13222,
    "time_to_solve": 327
  }
]