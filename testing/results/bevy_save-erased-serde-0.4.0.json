[
  {
    "built_with_features": null,
    "command": {
      "args": [
        "build",
        "--target",
        "thumbv7m-none-eabi",
        "--no-default-features"
      ],
      "code": 101,
      "stderr": "   Compiling bevy_save-erased-serde v0.4.0 (/Users/graysonnocera/Downloads/695-Project/dataset/nostd-failed-crates/crates/bevy_save-erased-serde-0.4.0)\nerror: expected item, found `\"erased-serde requires that either `std` (default) or `alloc` feature is enabled\"`\n --> src/features_check/error.rs:1:1\n  |\n1 | \"erased-serde requires that either `std` (default) or `alloc` feature is enabled\"\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected item\n  |\n  = note: for a full list of items that can appear in modules, see <https://doc.rust-lang.org/reference/items.html>\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:608:19\n    |\n608 |             &mut *std::ptr::addr_of_mut!(*ser)\n    |                   ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/de.rs:813:19\n    |\n813 |             &mut *std::ptr::addr_of_mut!(*de)\n    |                   ^^^ use of undeclared crate or module `std`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/de.rs:823:15\n    |\n823 | impl<'r, 'de> std::ops::Deref for IntoDeserializer<'r, 'de> {\n    |               ^^^ use of undeclared crate or module `std`\n    |\nhelp: consider importing this module\n    |\n1   + use core::ops;\n    |\nhelp: if you import `ops`, refer to it directly\n    |\n823 - impl<'r, 'de> std::ops::Deref for IntoDeserializer<'r, 'de> {\n823 + impl<'r, 'de> ops::Deref for IntoDeserializer<'r, 'de> {\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/de.rs:831:15\n    |\n831 | impl<'r, 'de> std::ops::DerefMut for IntoDeserializer<'r, 'de> {\n    |               ^^^ use of undeclared crate or module `std`\n    |\nhelp: consider importing this module\n    |\n1   + use core::ops;\n    |\nhelp: if you import `ops`, refer to it directly\n    |\n831 - impl<'r, 'de> std::ops::DerefMut for IntoDeserializer<'r, 'de> {\n831 + impl<'r, 'de> ops::DerefMut for IntoDeserializer<'r, 'de> {\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:618:10\n    |\n618 | impl<'w> std::ops::Deref for IntoSerializer<'w> {\n    |          ^^^ use of undeclared crate or module `std`\n    |\nhelp: consider importing this module\n    |\n1   + use core::ops;\n    |\nhelp: if you import `ops`, refer to it directly\n    |\n618 - impl<'w> std::ops::Deref for IntoSerializer<'w> {\n618 + impl<'w> ops::Deref for IntoSerializer<'w> {\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:626:10\n    |\n626 | impl<'w> std::ops::DerefMut for IntoSerializer<'w> {\n    |          ^^^ use of undeclared crate or module `std`\n    |\nhelp: consider importing this module\n    |\n1   + use core::ops;\n    |\nhelp: if you import `ops`, refer to it directly\n    |\n626 - impl<'w> std::ops::DerefMut for IntoSerializer<'w> {\n626 + impl<'w> ops::DerefMut for IntoSerializer<'w> {\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:855:29\n    |\n855 |                 T: ?Sized + std::fmt::Display,\n    |                             ^^^ use of undeclared crate or module `std`\n...\n867 | impl_serializer_for_trait_object!(<'a, 'w> serde::Serializer for &'a mut IntoSerializer<'w>);\n    | -------------------------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_serializer_for_trait_object` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this module\n    |\n1   + use core::fmt;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:855:29\n    |\n855 |                 T: ?Sized + std::fmt::Display,\n    |                             ^^^ use of undeclared crate or module `std`\n...\n868 | impl_serializer_for_trait_object!(<'a> serde::Serializer for &'a mut dyn Serializer);\n    | ------------------------------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `impl_serializer_for_trait_object` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this module\n    |\n1   + use core::fmt;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:855:29\n    |\n855 |                 T: ?Sized + std::fmt::Display,\n    |                             ^^^ use of undeclared crate or module `std`\n...\n869 | impl_serializer_for_trait_object!(<'a> serde::Serializer for &'a mut (dyn Serializer + Send));\n    | --------------------------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_serializer_for_trait_object` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this module\n    |\n1   + use core::fmt;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:855:29\n    |\n855 |                 T: ?Sized + std::fmt::Display,\n    |                             ^^^ use of undeclared crate or module `std`\n...\n870 | impl_serializer_for_trait_object!(<'a> serde::Serializer for &'a mut (dyn Serializer + Sync));\n    | --------------------------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_serializer_for_trait_object` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this module\n    |\n1   + use core::fmt;\n    |\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `std`\n   --> src/ser.rs:855:29\n    |\n855 |                 T: ?Sized + std::fmt::Display,\n    |                             ^^^ use of undeclared crate or module `std`\n...\n871 | impl_serializer_for_trait_object!(<'a> serde::Serializer for &'a mut (dyn Serializer + Send + Sync));\n    | ---------------------------------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_serializer_for_trait_object` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this module\n    |\n1   + use core::fmt;\n    |\n\nwarning: unexpected `cfg` condition name: `no_unsafe_op_in_unsafe_fn_lint`\n   --> src/lib.rs:100:17\n    |\n100 | #![cfg_attr(not(no_unsafe_op_in_unsafe_fn_lint), deny(unsafe_op_in_unsafe_fn))]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_unsafe_op_in_unsafe_fn_lint)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_unsafe_op_in_unsafe_fn_lint)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `no_unsafe_op_in_unsafe_fn_lint`\n   --> src/lib.rs:101:13\n    |\n101 | #![cfg_attr(no_unsafe_op_in_unsafe_fn_lint, allow(unused_unsafe))]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_unsafe_op_in_unsafe_fn_lint)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_unsafe_op_in_unsafe_fn_lint)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused imports: `vec::Vec` and `vec`\n   --> src/lib.rs:123:27\n    |\n123 |     pub use self::alloc::{vec, vec::Vec};\n    |                           ^^^  ^^^^^^^^\n    |\n    = note: `#[warn(unused_imports)]` on by default\n\nwarning: unexpected `cfg` condition name: `no_maybe_uninit`\n --> src/any.rs:2:7\n  |\n2 | #[cfg(no_maybe_uninit)]\n  |       ^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_maybe_uninit)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_maybe_uninit)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `no_maybe_uninit`\n --> src/any.rs:5:11\n  |\n5 | #[cfg(not(no_maybe_uninit))]\n  |           ^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_maybe_uninit)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_maybe_uninit)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `no_maybe_uninit`\n   --> src/any.rs:142:7\n    |\n142 | #[cfg(no_maybe_uninit)]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_maybe_uninit)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_maybe_uninit)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `no_maybe_uninit`\n   --> src/any.rs:146:7\n    |\n146 | #[cfg(no_maybe_uninit)]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_maybe_uninit)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_maybe_uninit)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `include_fnptr_in_fingerprint`\n   --> src/any.rs:157:11\n    |\n157 |     #[cfg(include_fnptr_in_fingerprint)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(include_fnptr_in_fingerprint)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(include_fnptr_in_fingerprint)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `no_maybe_uninit`\n  --> src/any.rs:28:14\n   |\n28 |     cfg!(not(no_maybe_uninit))\n   |              ^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_maybe_uninit)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_maybe_uninit)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `include_fnptr_in_fingerprint`\n   --> src/any.rs:170:19\n    |\n170 |             #[cfg(include_fnptr_in_fingerprint)]\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(include_fnptr_in_fingerprint)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(include_fnptr_in_fingerprint)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0223]: ambiguous associated type\n   --> src/de.rs:826:25\n    |\n826 |     fn deref(&self) -> &Self::Target {\n    |                         ^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Target` implemented for `de::IntoDeserializer<'r, 'de>`, you could use the fully-qualified path\n    |\n826 |     fn deref(&self) -> &<de::IntoDeserializer<'r, 'de> as Example>::Target {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/de.rs:832:37\n    |\n832 |     fn deref_mut(&mut self) -> &mut Self::Target {\n    |                                     ^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Target` implemented for `de::IntoDeserializer<'r, 'de>`, you could use the fully-qualified path\n    |\n832 |     fn deref_mut(&mut self) -> &mut <de::IntoDeserializer<'r, 'de> as Example>::Target {\n    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/ser.rs:621:25\n    |\n621 |     fn deref(&self) -> &Self::Target {\n    |                         ^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Target` implemented for `IntoSerializer<'w>`, you could use the fully-qualified path\n    |\n621 |     fn deref(&self) -> &<IntoSerializer<'w> as Example>::Target {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0223]: ambiguous associated type\n   --> src/ser.rs:627:37\n    |\n627 |     fn deref_mut(&mut self) -> &mut Self::Target {\n    |                                     ^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Target` implemented for `IntoSerializer<'w>`, you could use the fully-qualified path\n    |\n627 |     fn deref_mut(&mut self) -> &mut <IntoSerializer<'w> as Example>::Target {\n    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSome errors have detailed explanations: E0223, E0433.\nFor more information about an error, try `rustc --explain E0223`.\nwarning: `bevy_save-erased-serde` (lib) generated 10 warnings\nerror: could not compile `bevy_save-erased-serde` (lib) due to 16 previous errors; 10 warnings emitted\n",
      "stdout": ""
    },
    "features": [
      "std"
    ],
    "project": "../../../Downloads/695-Project/dataset/nostd-failed-crates/crates/bevy_save-erased-serde-0.4.0/src",
    "time_to_build": 11848,
    "time_to_solve": 140
  }
]